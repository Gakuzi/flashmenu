const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'file://'],
    credentials: true
}));
app.use(express.json());
app.use(express.static('.'));

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è Gemini API
app.post('/api/gemini', async (req, res) => {
    try {
        const { prompt } = req.body;
        
        if (!prompt) {
            return res.status(400).json({ error: 'Prompt is required' });
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const apiKey = process.env.GEMINI_API_KEY || 'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4';
        const apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

        console.log('ü§ñ Gemini API –∑–∞–ø—Ä–æ—Å:', prompt.substring(0, 100) + '...');

        const response = await fetch(`${apiUrl}?key=${apiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }]
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('‚ùå Gemini API Error:', errorData);
            return res.status(response.status).json({ 
                error: errorData.error?.message || 'Gemini API Error',
                details: errorData
            });
        }

        const data = await response.json();
        console.log('‚úÖ Gemini API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        
        res.json(data);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ 
            error: 'Internal Server Error',
            message: error.message 
        });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        gemini: !!process.env.GEMINI_API_KEY
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
    console.log(`ü§ñ Gemini API: ${process.env.GEMINI_API_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª—é—á'}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
}); 