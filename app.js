// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ config.js)
const API_CONFIG = window.GEMINI_CONFIG || {
    apiKey: 'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4',
    baseUrl: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent'
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
console.log('=== API Key Verification ===');
console.log('Config loaded:', !!window.GEMINI_CONFIG);
console.log('API Key from config:', API_CONFIG.apiKey);
console.log('API Key length:', API_CONFIG.apiKey ? API_CONFIG.apiKey.length : 0);
console.log('Expected key:', 'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4');
console.log('Keys match:', API_CONFIG.apiKey === 'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4');
console.log('==========================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
function getApiKey() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (API_CONFIG.apiKey) {
            console.log('‚úÖ API Key –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            return API_CONFIG.apiKey;
        }
        
        console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:', error);
        return null;
    }
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentUser = null;
let currentMenu = null;
let currentProducts = [];
let boughtProducts = [];
let availableIngredients = [];
let menus = [];
let activeTimer = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
let supabaseClient = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ Flash Menu –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
    console.log('üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', window.location.href);
    console.log('üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:', document.querySelectorAll('script').length);
    console.log('üìã –°–∫—Ä–∏–ø—Ç—ã:', Array.from(document.querySelectorAll('script')).map(s => s.src || 'inline'));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
    console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase...');
    const supabaseResult = await initSupabase();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', supabaseResult);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á
    testApiKey();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase)
    if (!supabaseClient) {
        console.log('üßπ –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ localStorage...');
        clearCorruptedData();
    }
    
    console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    await checkAuth();
    
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
    setupEventListeners();
    
    console.log('‚úÖ Flash Menu –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üéØ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
async function initSupabase() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Supabase...');
    console.log('SUPABASE_CONFIG:', window.SUPABASE_CONFIG);
    
    if (window.SUPABASE_CONFIG && window.SUPABASE_CONFIG.url && window.SUPABASE_CONFIG.anonKey) {
        try {
            console.log('üîß –°–æ–∑–¥–∞–µ–º SupabaseClient...');
            console.log('SupabaseClient –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof SupabaseClient);
            console.log('SupabaseClient:', SupabaseClient);
            
            if (typeof SupabaseClient !== 'function') {
                throw new Error('SupabaseClient –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            
            supabaseClient = new SupabaseClient(
                window.SUPABASE_CONFIG.url,
                window.SUPABASE_CONFIG.anonKey
            );
            
            console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...');
            const isConnected = await supabaseClient.init();
            
            if (isConnected) {
                console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                await supabaseClient.createTables();
                return true;
            } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        }
    } else {
        console.log('‚ö†Ô∏è SUPABASE_CONFIG –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π');
        console.log('URL:', window.SUPABASE_CONFIG?.url);
        console.log('Key:', window.SUPABASE_CONFIG?.anonKey ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
    }
    
    console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
    return false;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
function testApiKey() {
    const apiKey = getApiKey();
    console.log('=== API Key Test ===');
    console.log('Config loaded:', !!window.GEMINI_CONFIG);
    console.log('API Key from config:', API_CONFIG.apiKey);
    console.log('Current API key:', apiKey);
    console.log('Key length:', apiKey ? apiKey.length : 0);
    console.log('New key expected:', 'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4');
    console.log('Keys match:', apiKey === 'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4');
    console.log('===================');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuth() {
    if (supabaseClient) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
            const user = await supabaseClient.getCurrentUser();
            if (user) {
                currentUser = user;
                showApp();
                await loadUserData();
                return;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        }
    }
    
    // Fallback –Ω–∞ localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        showApp();
        loadUserData();
    } else {
        showAuth();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuth() {
    document.getElementById('authScreen').style.display = 'flex';
    document.getElementById('appContainer').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function showApp() {
    document.getElementById('authScreen').style.display = 'none';
    document.getElementById('appContainer').style.display = 'block';
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAvatar = document.getElementById('userAvatar');
    if (currentUser) {
        userAvatar.innerHTML = currentUser.email.charAt(0).toUpperCase();
        userAvatar.title = currentUser.email;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ HTML
    const loginForm = document.getElementById('loginForm');
    const showRegister = document.getElementById('showRegister');
    const showForgotPassword = document.getElementById('showForgotPassword');
    
    if (loginForm) {
        console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è loginForm');
        loginForm.addEventListener('submit', handleLogin);
    } else {
        console.log('‚ùå loginForm –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (showRegister) {
        console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è showRegister');
        showRegister.addEventListener('click', showRegisterForm);
    } else {
        console.log('‚ùå showRegister –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (showForgotPassword) {
        console.log('‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è showForgotPassword');
        showForgotPassword.addEventListener('click', showForgotPasswordForm);
    } else {
        console.log('‚ùå showForgotPassword –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.addEventListener('click', () => switchTab(tab.dataset.tab));
    });
    
    // –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
    const menuForm = document.getElementById('menuForm');
    if (menuForm) {
        menuForm.addEventListener('submit', generateMenu);
    }
    
    // –í—ã—Ö–æ–¥
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function showRegisterForm() {
    console.log('üîê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    const authCard = document.querySelector('.auth-card');
    console.log('authCard:', authCard);
    
    if (!authCard) {
        console.error('‚ùå authCard –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    authCard.innerHTML = `
        <div class="logo">
            <i class="fas fa-utensils"></i>
        </div>
        <h1 class="app-title">Flash Menu</h1>
        <p class="app-subtitle">–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
        
        <form id="registerForm" class="auth-form">
            <div class="form-group">
                <label class="form-label">Email</label>
                <input type="email" class="form-input" id="registerEmail" required>
            </div>
            <div class="form-group">
                <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                <input type="password" class="form-input" id="registerPassword" required minlength="6">
            </div>
            <div class="form-group">
                <label class="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                <input type="password" class="form-input" id="confirmPassword" required minlength="6">
            </div>
            <button type="submit" class="btn btn-primary btn-large">
                <i class="fas fa-user-plus"></i>
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
        </form>
        
        <div class="auth-switch">
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a href="#" id="showLogin">–í–æ–π—Ç–∏</a>
        </div>
    `;
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    document.getElementById('registerForm').addEventListener('submit', handleRegister);
    document.getElementById('showLogin').addEventListener('click', showLoginForm);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
function showLoginForm() {
    console.log('üîë –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞...');
    const authCard = document.querySelector('.auth-card');
    console.log('authCard:', authCard);
    
    if (!authCard) {
        console.error('‚ùå authCard –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    authCard.innerHTML = `
        <div class="logo">
            <i class="fas fa-utensils"></i>
        </div>
        <h1 class="app-title">Flash Menu</h1>
        <p class="app-subtitle">–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –º–µ–Ω—é</p>
        
        <form id="loginForm" class="auth-form">
            <div class="form-group">
                <label class="form-label">Email</label>
                <input type="email" class="form-input" id="loginEmail" required>
            </div>
            <div class="form-group">
                <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                <input type="password" class="form-input" id="loginPassword" required>
            </div>
            <button type="submit" class="btn btn-primary btn-large">
                <i class="fas fa-sign-in-alt"></i>
                –í–æ–π—Ç–∏
            </button>
        </form>
        
        <div class="auth-switch">
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="#" id="showRegister">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
            <br>
            <a href="#" id="showForgotPassword">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
        </div>
    `;
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('loginForm').addEventListener('submit', handleLogin);
    document.getElementById('showRegister').addEventListener('click', showRegisterForm);
    document.getElementById('showForgotPassword').addEventListener('click', showForgotPasswordForm);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
function showForgotPasswordForm() {
    console.log('üìß –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è...');
    const authCard = document.querySelector('.auth-card');
    console.log('authCard:', authCard);
    
    if (!authCard) {
        console.error('‚ùå authCard –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    authCard.innerHTML = `
        <div class="logo">
            <i class="fas fa-utensils"></i>
        </div>
        <h1 class="app-title">Flash Menu</h1>
        <p class="app-subtitle">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</p>
        
        <div class="form-group">
            <label class="form-label">Email</label>
            <input type="email" class="form-input" id="forgotPasswordEmail" required>
        </div>
        <button type="button" class="btn btn-primary btn-large" id="resetPasswordBtn">
            <i class="fas fa-envelope"></i>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        </button>
        
        <div class="auth-switch">
            <a href="#" id="backToLogin">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É</a>
        </div>
    `;
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('resetPasswordBtn').addEventListener('click', handleResetPassword);
    document.getElementById('backToLogin').addEventListener('click', showLoginForm);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function handleResetPassword() {
    const email = document.getElementById('forgotPasswordEmail').value;
    
    if (!email || !email.includes('@')) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
        return;
    }
    
    try {
        if (supabaseClient) {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Supabase
            const { error } = await supabaseClient.supabase.auth.resetPasswordForEmail(email, {
                redirectTo: window.location.origin + '/reset-password.html'
            });
            
            if (error) throw error;
            
            showMessage('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email', 'success');
            setTimeout(() => showLoginForm(), 2000);
        } else {
            showMessage('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ localStorage', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
        showMessage(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegister(e) {
    e.preventDefault();
    
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
    console.log('supabaseClient:', supabaseClient);
    
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    console.log('üìß Email:', email);
    console.log('üîë –ü–∞—Ä–æ–ª—å:', password ? '***' : '–ø—É—Å—Ç–æ–π');
    console.log('üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', confirmPassword ? '***' : '–ø—É—Å—Ç–æ–π');
    
    if (password !== confirmPassword) {
        showMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }
    
    try {
        if (supabaseClient && supabaseClient.initialized) {
            console.log('üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase...');
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
            const user = await supabaseClient.registerUser(email, password);
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user);
            currentUser = user;
            showApp();
            await loadUserData();
            showMessage('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
        } else {
            console.log('üíæ Fallback –Ω–∞ localStorage...');
            // Fallback –Ω–∞ localStorage
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            if (users.find(user => user.email === email)) {
                showMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
                return;
            }
            
            const newUser = {
                id: Date.now(),
                email,
                password: btoa(password),
                createdAt: new Date().toISOString()
            };
            
            users.push(newUser);
            localStorage.setItem('users', JSON.stringify(users));
            
            showMessage('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'success');
            setTimeout(() => showLoginForm(), 2000);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showMessage(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
async function handleLogin(e) {
    e.preventDefault();
    
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    
    try {
        if (supabaseClient) {
            // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
            const user = await supabaseClient.loginUser(email, password);
            currentUser = user;
            showApp();
            await loadUserData();
            showMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.email}!`, 'success');
        } else {
            // Fallback –Ω–∞ localStorage
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const user = users.find(u => u.email === email && u.password === btoa(password));
            
            if (user) {
                currentUser = user;
                localStorage.setItem('currentUser', JSON.stringify(user));
                showApp();
                loadUserData();
                showMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.email}!`, 'success');
            } else {
                showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showMessage(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`, 'error');
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function logout() {
    try {
        if (supabaseClient) {
            await supabaseClient.logoutUser();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ Supabase:', error);
    }
    
    currentUser = null;
    localStorage.removeItem('currentUser');
    showAuth();
    showMessage('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    if (!currentUser) return;
    
    try {
        if (supabaseClient) {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
            const userData = await supabaseClient.loadUserData(currentUser.id);
            if (userData) {
                availableIngredients = userData.availableIngredients || [
                    "—Ä–∏—Å (~700 –≥)", "–º–∞–∫–∞—Ä–æ–Ω—ã", "–∫–∞–ø—É—Å—Ç–∞", "–º–∞—Å–ª–æ", "—Å–æ–ª—å", "—Å–ø–µ—Ü–∏–∏"
                ];
                menus = userData.menus || [];
                currentProducts = userData.currentProducts || [];
                boughtProducts = userData.boughtProducts || [];
            }
        } else {
            // Fallback –Ω–∞ localStorage
            const userKey = `user_${currentUser.id}`;
            
            try {
                boughtProducts = safeJsonParse(localStorage.getItem(`${userKey}_boughtProducts`), []);
                availableIngredients = safeJsonParse(localStorage.getItem(`${userKey}_availableIngredients`), [
                    "—Ä–∏—Å (~700 –≥)", "–º–∞–∫–∞—Ä–æ–Ω—ã", "–∫–∞–ø—É—Å—Ç–∞", "–º–∞—Å–ª–æ", "—Å–æ–ª—å", "—Å–ø–µ—Ü–∏–∏"
                ]);
                menus = safeJsonParse(localStorage.getItem(`${userKey}_menus`), []);
                currentProducts = safeJsonParse(localStorage.getItem(`${userKey}_currentProducts`), []);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                resetUserData(userKey);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    updateUI();
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
function safeJsonParse(jsonString, defaultValue) {
    if (!jsonString) return defaultValue;
    
    try {
        return JSON.parse(jsonString);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
        return defaultValue;
    }
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
function resetUserData(userKey) {
    console.log('–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º');
    
    boughtProducts = [];
    availableIngredients = [
        "—Ä–∏—Å (~700 –≥)", "–º–∞–∫–∞—Ä–æ–Ω—ã", "–∫–∞–ø—É—Å—Ç–∞", "–º–∞—Å–ª–æ", "—Å–æ–ª—å", "—Å–ø–µ—Ü–∏–∏"
    ];
    menus = [];
    currentProducts = [];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    saveUserData();
}

// –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function clearCorruptedData() {
    console.log('–û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ localStorage');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ localStorage
    const keys = Object.keys(localStorage);
    
    // –ò—â–µ–º –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const userKeys = keys.filter(key => key.startsWith('user_'));
    
    userKeys.forEach(key => {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            const data = localStorage.getItem(key);
            if (data) {
                JSON.parse(data);
            }
        } catch (error) {
            console.warn(`–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª—é—á–µ ${key}, —É–¥–∞–ª—è–µ–º`);
            localStorage.removeItem(key);
        }
    });
    
    console.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearAllUserData() {
    if (!currentUser) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
        console.log('–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        const userKey = `user_${currentUser.id}`;
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.removeItem(`${userKey}_boughtProducts`);
        localStorage.removeItem(`${userKey}_availableIngredients`);
        localStorage.removeItem(`${userKey}_menus`);
        localStorage.removeItem(`${userKey}_currentProducts`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        boughtProducts = [];
        availableIngredients = [
            "—Ä–∏—Å (~700 –≥)", "–º–∞–∫–∞—Ä–æ–Ω—ã", "–∫–∞–ø—É—Å—Ç–∞", "–º–∞—Å–ª–æ", "—Å–æ–ª—å", "—Å–ø–µ—Ü–∏–∏"
        ];
        menus = [];
        currentProducts = [];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateShoppingUI();
        updateMenuUI();
        
        showMessage('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã', 'success');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserData() {
    if (!currentUser) return;
    
    try {
        if (supabaseClient) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            await supabaseClient.updateUserData(currentUser.id, {
                available_ingredients: availableIngredients,
                menus: menus
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            await supabaseClient.saveProducts(currentUser.id, currentProducts);
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase');
        } else {
            // Fallback –Ω–∞ localStorage
            const userKey = `user_${currentUser.id}`;
            localStorage.setItem(`${userKey}_boughtProducts`, JSON.stringify(boughtProducts));
            localStorage.setItem(`${userKey}_availableIngredients`, JSON.stringify(availableIngredients));
            localStorage.setItem(`${userKey}_menus`, JSON.stringify(menus));
            localStorage.setItem(`${userKey}_currentProducts`, JSON.stringify(currentProducts));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });

    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(tabName).classList.add('active');

    if (tabName === 'shopping') {
        updateShoppingUI();
    } else if (tabName === 'menu') {
        updateMenuUI();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ Gemini API
async function generateMenu(e) {
    e.preventDefault();
    
    const budget = parseInt(document.getElementById('budget').value);
    const days = parseInt(document.getElementById('days').value);
    const start = document.getElementById('start').value;
    const meal = document.getElementById('meal').value;

    if (budget < 500) {
        showMessage('–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 500 ‚ÇΩ', 'error');
        return;
    }

    showLoading(true);
    showMessage('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é...', 'success');

    try {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
        const menuPrompt = `–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ ${days} –¥–Ω–µ–π –¥–ª—è ${meal} —Å –±—é–¥–∂–µ—Ç–æ–º ${budget} ‚ÇΩ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏. –£—á–∏—Ç—ã–≤–∞–π –∏–º–µ—é—â–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã: ${availableIngredients.join(', ')}. –§–æ—Ä–º–∞—Ç: JSON —Å –ø–æ–ª—è–º–∏ day, meal, recipe, ingredients [{ name, qty, unit }], cookingTime. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –≤ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–∞—Ö.`;
        
        const menuResponse = await callGeminiAPI(menuPrompt);
        const menuData = parseJSONResponse(menuResponse);
        
        if (!menuData || !Array.isArray(menuData)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const productsWithPrices = await getProductsWithPrices(menuData, budget);
        
        if (productsWithPrices.totalCost > budget) {
            // –ü–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–µ–Ω—é
            const adjustedMenu = await adjustMenuForBudget(menuData, budget, productsWithPrices.totalCost);
            if (adjustedMenu) {
                menuData = adjustedMenu;
                productsWithPrices = await getProductsWithPrices(menuData, budget);
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é
        const menuId = Date.now();
        const newMenu = {
            id: menuId,
            budget,
            days,
            meal,
            start,
            items: menuData,
            totalCost: productsWithPrices.totalCost,
            createdAt: new Date().toISOString()
        };

        menus.push(newMenu);
        currentMenu = newMenu;
        currentProducts = productsWithPrices.products;

        saveUserData();
        updateMenuSelector();
        showMessage('–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∫—É–ø–æ–∫
        setTimeout(() => switchTab('shopping'), 1000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é:', error);
        showMessage(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –í—ã–∑–æ–≤ Gemini API
async function callGeminiAPI(prompt) {
    const apiKey = getApiKey();
    if (!apiKey) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å API –∫–ª—é—á–æ–º
    const url = `${API_CONFIG.baseUrl}?key=${apiKey}`;
    
    console.log('üîë API Key –ø–æ–ª—É—á–µ–Ω:', apiKey.substring(0, 10) + '...');
    console.log('üåê API URL:', url);

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            contents: [{
                parts: [{
                    text: prompt
                }]
            }]
        })
    });

    if (!response.ok) {
        const errorData = await response.json();
        console.error('API Error Response:', errorData);
        throw new Error(`–û—à–∏–±–∫–∞ API: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
function parseJSONResponse(response) {
    try {
        const jsonMatch = response.match(/```json\n([\s\S]*?)\n```/);
        if (jsonMatch) {
            return JSON.parse(jsonMatch[1]);
        }
        return JSON.parse(response);
    } catch (error) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç API');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async function getProductsWithPrices(menuData, budget) {
    const allIngredients = new Map();
    const products = [];
    let totalCost = 0;

    // –°–±–æ—Ä –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    menuData.forEach(item => {
        if (item.ingredients) {
            item.ingredients.forEach(ingredient => {
                const key = ingredient.name.toLowerCase();
                if (!allIngredients.has(key)) {
                    allIngredients.set(key, ingredient);
                }
            });
        }
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
    for (const [key, ingredient] of allIngredients) {
        try {
            const pricePrompt = `–ù–∞–π–¥–∏ —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ "${ingredient.name}" –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: JSON —Å –ø–æ–ª—è–º–∏ name, pack, price. –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–Ω–∞–ª–æ–≥. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON.`;
            
            const priceResponse = await callGeminiAPI(pricePrompt);
            const priceData = parseJSONResponse(priceResponse);
            
            if (priceData && priceData.price) {
                const product = {
                    name: priceData.name,
                    pack: priceData.pack,
                    price: parseFloat(priceData.price),
                    qty: ingredient.qty || 1,
                    unit: ingredient.unit || '—à—Ç',
                    sum: parseFloat(priceData.price) * (ingredient.qty || 1)
                };
                
                products.push(product);
                totalCost += product.sum;
            }
        } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${ingredient.name}:`, error);
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ü–µ–Ω–æ–π
            const product = {
                name: ingredient.name,
                pack: '~',
                price: 100,
                qty: ingredient.qty || 1,
                unit: ingredient.unit || '—à—Ç',
                sum: 100 * (ingredient.qty || 1)
            };
            products.push(product);
            totalCost += product.sum;
        }
    }

    return { products, totalCost };
}

// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ–Ω—é –ø–æ–¥ –±—é–¥–∂–µ—Ç
async function adjustMenuForBudget(originalMenu, budget, currentCost) {
    try {
        const adjustPrompt = `–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –±—é–¥–∂–µ—Ç ${budget} ‚ÇΩ. –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${currentCost} ‚ÇΩ. –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ –¥–µ—à—ë–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∑–∞–º–µ–Ω–∏ –¥–æ—Ä–æ–≥–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏. –§–æ—Ä–º–∞—Ç: JSON —Å –ø–æ–ª—è–º–∏ day, meal, recipe, ingredients [{ name, qty, unit }], cookingTime. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON.`;
        
        const adjustResponse = await callGeminiAPI(adjustPrompt);
        return parseJSONResponse(adjustResponse);
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é:', error);
        return null;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ–∫—É–ø–æ–∫
function updateShoppingUI() {
    const shoppingContent = document.getElementById('shoppingContent');
    
    if (currentProducts.length === 0) {
        shoppingContent.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>';
        return;
    }

    shoppingContent.innerHTML = `
        <div class="available-ingredients">
            <div class="ingredients-title">–ò–º–µ—é—â–∏–µ—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</div>
            <div class="ingredients-list">${availableIngredients.join(', ')}</div>
        </div>
        
        <div class="search-box">
            <input type="text" class="search-input" id="searchProducts" placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º...">
        </div>
        
        <div id="productsList"></div>
        
        <div class="total-sum" id="totalSum"></div>
        
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>
        
        <button class="btn btn-success" id="markAllBought">–£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã</button>
        <button class="btn btn-danger" id="resetList">–°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫</button>
        <button class="btn btn-warning" id="clearAllData">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</button>
    `;

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.getElementById('searchProducts').addEventListener('input', filterProducts);
    document.getElementById('markAllBought').addEventListener('click', markAllAsBought);
    document.getElementById('resetList').addEventListener('click', resetShoppingList);
    document.getElementById('clearAllData').addEventListener('click', clearAllUserData);

    renderProductsList();
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderProductsList() {
    const productsList = document.getElementById('productsList');
    const boughtProductsDiv = document.getElementById('boughtProducts');
    const totalSum = document.getElementById('totalSum');
    const progressFill = document.getElementById('progressFill');

    // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    productsList.innerHTML = '';
    currentProducts.forEach((product, index) => {
        if (!boughtProducts.includes(index)) {
            const productCard = document.createElement('div');
            productCard.className = 'product-card';
            productCard.innerHTML = `
                <input type="checkbox" class="checkbox" data-index="${index}">
                <div class="product-info">
                    <div class="product-name">${product.name}</div>
                    <div class="product-details">${product.pack} ‚Ä¢ ${product.qty} ${product.unit}</div>
                </div>
                <div class="product-price">${product.sum.toFixed(2)} ‚ÇΩ</div>
            `;
            
            productCard.querySelector('.checkbox').addEventListener('change', (e) => {
                if (e.target.checked) {
                    boughtProducts.push(index);
                    availableIngredients.push(`${product.name} (${product.qty} ${product.unit})`);
                } else {
                    const idx = boughtProducts.indexOf(index);
                    if (idx > -1) {
                        boughtProducts.splice(idx, 1);
                        const ingredientIdx = availableIngredients.findIndex(ing => ing.includes(product.name));
                        if (ingredientIdx > -1) {
                            availableIngredients.splice(ingredientIdx, 1);
                        }
                    }
                }
                saveUserData();
                renderProductsList();
            });
            
            productsList.appendChild(productCard);
        }
    });

    // –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    boughtProductsDiv.innerHTML = '';
    boughtProducts.forEach(index => {
        const product = currentProducts[index];
        if (product) {
            const boughtCard = document.createElement('div');
            boughtCard.className = 'product-card';
            boughtCard.style.background = '#ecfdf5';
            boughtCard.innerHTML = `
                <div class="product-info">
                    <div class="product-name">${product.name} ‚úì</div>
                    <div class="product-details">${product.pack} ‚Ä¢ ${product.qty} ${product.unit}</div>
                </div>
                <div class="product-price">${product.sum.toFixed(2)} ‚ÇΩ</div>
            `;
            boughtProductsDiv.appendChild(boughtCard);
        }
    });

    // –û–±—â–∞—è —Å—É–º–º–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    const totalCost = currentProducts.reduce((sum, product, index) => {
        return sum + (boughtProducts.includes(index) ? 0 : product.sum);
    }, 0);

    totalSum.textContent = `–û–±—â–∞—è —Å—É–º–º–∞: ${totalCost.toFixed(2)} ‚ÇΩ`;
    
    const progress = currentProducts.length > 0 ? (boughtProducts.length / currentProducts.length) * 100 : 0;
    progressFill.style.width = `${progress}%`;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function filterProducts() {
    const searchTerm = document.getElementById('searchProducts').value.toLowerCase();
    const productCards = document.querySelectorAll('.product-card');
    
    productCards.forEach(card => {
        const productName = card.querySelector('.product-name').textContent.toLowerCase();
        if (productName.includes(searchTerm)) {
            card.style.display = 'flex';
        } else {
            card.style.display = 'none';
        }
    });
}

// –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
function markAllAsBought() {
    currentProducts.forEach((product, index) => {
        if (!boughtProducts.includes(index)) {
            boughtProducts.push(index);
            availableIngredients.push(`${product.name} (${product.qty} ${product.unit})`);
        }
    });
    
    saveUserData();
    renderProductsList();
    showMessage('–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ!', 'success');
}

// –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
function resetShoppingList() {
    boughtProducts = [];
    saveUserData();
    renderProductsList();
    showMessage('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å–±—Ä–æ—à–µ–Ω!', 'success');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –º–µ–Ω—é
function updateMenuUI() {
    const menuContent = document.getElementById('menuContent');
    
    if (menus.length === 0) {
        menuContent.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>';
        return;
    }

    menuContent.innerHTML = `
        <div class="menu-selector">
            <select class="menu-select" id="menuSelector">
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é...</option>
            </select>
            <button class="btn btn-success" id="generateNewMenu">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é</button>
        </div>
        
        <div id="menuItems"></div>
    `;

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('generateNewMenu').addEventListener('click', () => switchTab('settings'));
    document.getElementById('menuSelector').addEventListener('change', loadSelectedMenu);

    updateMenuSelector();
    renderMenuItems();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–µ–Ω—é
function updateMenuSelector() {
    const selector = document.getElementById('menuSelector');
    if (!selector) return;
    
    selector.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é...</option>';
    
    menus.forEach(menu => {
        const option = document.createElement('option');
        option.value = menu.id;
        option.textContent = `–ú–µ–Ω—é –Ω–∞ ${menu.days} –¥–Ω–µ–π (${menu.meal}, ${menu.budget} ‚ÇΩ)`;
        selector.appendChild(option);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é
function loadSelectedMenu() {
    const menuId = document.getElementById('menuSelector').value;
    if (menuId) {
        currentMenu = menus.find(m => m.id == menuId);
        renderMenuItems();
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
function renderMenuItems() {
    const menuItems = document.getElementById('menuItems');
    
    if (!currentMenu) {
        menuItems.innerHTML = '<p>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞</p>';
        return;
    }

    menuItems.innerHTML = '';
    currentMenu.items.forEach((item, index) => {
        const recipeCard = document.createElement('div');
        recipeCard.className = 'recipe-card';
        
        const ingredientsList = item.ingredients ? item.ingredients.map(ing => 
            `${ing.name} ${ing.qty} ${ing.unit}`
        ).join(', ') : '';

        recipeCard.innerHTML = `
            <div class="recipe-header">
                <div class="recipe-title">${item.day} - ${item.meal}</div>
                ${item.cookingTime ? `<div class="recipe-time">${item.cookingTime} –º–∏–Ω</div>` : ''}
            </div>
            <div class="recipe-ingredients">
                <strong>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</strong> ${ingredientsList}
            </div>
            <p>${item.recipe}</p>
            ${item.cookingTime ? `<button class="btn btn-primary" onclick="startTimer(${item.cookingTime})">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä</button>` : ''}
        `;
        
        menuItems.appendChild(recipeCard);
    });
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer(minutes) {
    if (activeTimer) {
        clearInterval(activeTimer);
    }

    let timeLeft = minutes * 60;
    const timerDisplay = document.getElementById('timerDisplay');
    const timer = document.getElementById('timer');

    if (!timer) {
        // –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const timerHTML = `
            <div class="timer active" id="timer">
                <div class="timer-display" id="timerDisplay">${Math.floor(timeLeft / 60).toString().padStart(2, '0')}:${(timeLeft % 60).toString().padStart(2, '0')}</div>
                <button class="btn btn-primary" id="stopTimer">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä</button>
            </div>
        `;
        document.querySelector('.container').insertAdjacentHTML('beforeend', timerHTML);
        
        document.getElementById('stopTimer').addEventListener('click', stopTimer);
    } else {
        timer.classList.add('active');
    }

    activeTimer = setInterval(() => {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        
        document.getElementById('timerDisplay').textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
            clearInterval(activeTimer);
            activeTimer = null;
            document.getElementById('timer').classList.remove('active');
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (Notification.permission === 'granted') {
                new Notification('–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏!', {
                    body: '–í–∞—à–µ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!',
                    icon: '/favicon.ico'
                });
            } else {
                alert('–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏! –í–∞—à–µ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!');
            }
        }
        
        timeLeft--;
    }, 1000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function stopTimer() {
    if (activeTimer) {
        clearInterval(activeTimer);
        activeTimer = null;
    }
    const timer = document.getElementById('timer');
    if (timer) {
        timer.classList.remove('active');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading(show) {
    document.getElementById('loading').classList.toggle('active', show);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, type) {
    const message = document.createElement('div');
    message.className = `message ${type}`;
    message.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${text}
    `;
    
    document.querySelector('.container').insertBefore(message, document.querySelector('nav').nextSibling);
    
    setTimeout(() => {
        message.remove();
    }, 5000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ UI
function updateUI() {
    updateShoppingUI();
    updateMenuUI();
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
if ('Notification' in window) {
    Notification.requestPermission();
} 