// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentUser = null;
let currentMenu = null;
let currentProducts = [];
let boughtProducts = [];
let availableIngredients = [];
let menus = [];
let activeTimer = null;

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userProfile = {
    name: '',
    email: '',
    age: 30,
    weight: 70,
    height: 170,
    activity: 'moderate', // low, moderate, high
    preferences: {
        vegetarian: false,
        vegan: false,
        glutenFree: false,
        lactoseFree: false,
        spicy: false,
        allergies: []
    },
    goals: {
        weightLoss: false,
        weightGain: false,
        maintenance: false,
        muscleGain: false
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
let supabaseClient = null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
    baseUrl: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent'
};

// –ú–∞—Å—Å–∏–≤ API –∫–ª—é—á–µ–π –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
let apiKeys = [];
let currentKeyIndex = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª—é—á–µ–π
function initializeApiKeys() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ GitHub Actions —Å–µ–∫—Ä–µ—Ç–æ–≤
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ GitHub Actions
    for (let i = 1; i <= 8; i++) {
        const key = window[`GEMINI_API_KEY_${i}`];
        if (key && key !== '[–í–ê–®_API_–ö–õ–Æ–ß]' && key !== `[–í–ê–®_API_–ö–õ–Æ–ß_${i}]`) {
            apiKeys.push(key);
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock
    if (apiKeys.length === 0) {
        console.log('üé≠ –ù–µ—Ç API –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–∞–Ω–Ω—ã–µ');
        return;
    }
    
    console.log(`üîë –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${apiKeys.length} API –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤`);
    apiKeys.forEach((key, index) => {
        const maskedKey = key.substring(0, 10) + '...' + key.substring(key.length - 4);
        console.log(`  ${index + 1}. ${maskedKey}`);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ API –∫–ª—é—á–∞
function getCurrentApiKey() {
    if (apiKeys.length === 0) {
        initializeApiKeys();
    }
    return apiKeys[currentKeyIndex];
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
function switchToNextKey() {
    if (apiKeys.length === 0) return null;
    currentKeyIndex = (currentKeyIndex + 1) % apiKeys.length;
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–ª—é—á ${currentKeyIndex + 1}/${apiKeys.length}`);
    return getCurrentApiKey();
}

// –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –∫–ª—é—á–∞
function resetKeyIndex() {
    currentKeyIndex = 0;
    console.log('üîÑ –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –∫–ª—é—á–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π');
}

// –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ Gemini API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π
async function callGeminiAPI(prompt) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (apiKeys.length === 0) {
        initializeApiKeys();
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–∞–Ω–Ω—ã–µ
    if (apiKeys.length === 0) {
        console.log('üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–∞–Ω–Ω—ã–µ (–Ω–µ—Ç API –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)');
        return generateMockResponse(prompt);
    }

    // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    const maxAttempts = apiKeys.length;
    let attempt = 0;
    
    while (attempt < maxAttempts) {
        const apiKey = getCurrentApiKey();
        
        if (!apiKey) {
            console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π');
            break;
        }
        
        try {
            console.log(`üîë –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts} —Å –∫–ª—é—á–æ–º ${currentKeyIndex + 1}/${apiKeys.length}`);
            
            const url = `${API_CONFIG.baseUrl}?key=${apiKey}`;
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 2048,
                    }
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            
            if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                const result = data.candidates[0].content.parts[0].text;
                console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
                return result;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
            }
            
    } catch (error) {
            console.warn(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º ${currentKeyIndex + 1}:`, error.message);
            switchToNextKey();
            attempt++;
            
            if (attempt >= maxAttempts) {
                console.error('‚ùå –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–∞–Ω–Ω—ã–µ');
                return generateMockResponse(prompt);
            }
        }
    }
    
    return generateMockResponse(prompt);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mock –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function generateMockResponse(prompt) {
    console.log('üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Mock –æ—Ç–≤–µ—Ç –¥–ª—è:', prompt.substring(0, 100) + '...');
    
    if (prompt.includes('–º–µ–Ω—é')) {
        return JSON.stringify([
            {
                day: 1,
            meal: "–ó–∞–≤—Ç—Ä–∞–∫",
                recipe: "–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞ —Å —è–±–ª–æ–∫–∞–º–∏",
            ingredients: [
>>>>>>> main
                    { name: "–æ–≤—Å—è–Ω–∫–∞", qty: 100, unit: "–≥" },
                    { name: "–º–æ–ª–æ–∫–æ", qty: 200, unit: "–º–ª" },
                    { name: "—è–±–ª–æ–∫–æ", qty: 1, unit: "—à—Ç" },
                    { name: "–º–µ–¥", qty: 10, unit: "–≥" }
            ],
            cookingTime: 15
        },
        {
                day: 1,
            meal: "–û–±–µ–¥",
            recipe: "–ö—É—Ä–∏–Ω—ã–π —Å—É–ø —Å –æ–≤–æ—â–∞–º–∏",
            ingredients: [
>>>>>>> main
                    { name: "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", qty: 200, unit: "–≥" },
                    { name: "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", qty: 300, unit: "–≥" },
                    { name: "–º–æ—Ä–∫–æ–≤—å", qty: 100, unit: "–≥" },
                    { name: "–ª—É–∫", qty: 50, unit: "–≥" }
    ],
            cookingTime: 45
>>>>>>> main
            }
        ]);
    } else if (prompt.includes('–∫–∞—Ç–∞–ª–æ–≥') || prompt.includes('—Ü–µ–Ω–∞') || prompt.includes('–ø—Ä–æ–¥—É–∫—Ç')) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        const productName = prompt.match(/"([^"]+)"/)?.[1] || "–ø—Ä–æ–¥—É–∫—Ç";
        const randomPrice = Math.floor(Math.random() * 500) + 50;
        const units = ["–∫–≥", "–ª", "—à—Ç", "–≥", "–º–ª"];
        const unit = units[Math.floor(Math.random() * units.length)];
        const packs = ["1 –∫–≥", "1 –ª", "500 –≥", "250 –º–ª", "10 —à—Ç"];
        const pack = packs[Math.floor(Math.random() * packs.length)];
        
        return JSON.stringify({
            name: productName,
            pack: pack,
            price: randomPrice,
            unit: unit,
            qty: 1,
            sum: randomPrice
        });
    }
    
    return "Mock –æ—Ç–≤–µ—Ç";
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
async function generateMenu(e) {
    e.preventDefault();
    
    const budget = parseInt(document.getElementById('budget').value);
    const days = parseInt(document.getElementById('days').value);
    const start = document.getElementById('start').value;
    const meal = document.getElementById('meal').value;

    if (budget < 500) {
        showMessage('–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 500 ‚ÇΩ', 'error');
        return;
    }

    showLoading(true);
    showMessage('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω...', 'success');

    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏...');
        console.log('üí∞ –ë—é–¥–∂–µ—Ç:', budget, '‚ÇΩ');
        console.log('üìÖ –î–Ω–∏:', days);
        console.log('üçΩÔ∏è –ü—Ä–∏–µ–º –ø–∏—â–∏:', meal);
        console.log('üìç –ù–∞—á–∞–ª–æ:', start);
        
        // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏
        const menuWithPrices = await generateMenuWithRealPrices(budget, days, meal, start);
        if (!menuWithPrices) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω');
        }
        
        // –®–∞–≥ 2: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é
        const adjustedMenu = await showMenuCorrectionDialog(menuWithPrices.menu, budget, days, meal, start);
        if (!adjustedMenu) {
            showMessage('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
            return;
        }
        
        // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é
        const updatedProducts = await updatePricesForMenu(adjustedMenu);
        if (!updatedProducts) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é');
        }
        
        // –®–∞–≥ 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
        const userProductChoices = await showProductsChoiceDialog(updatedProducts, budget);
        if (!userProductChoices) {
            showMessage('–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω', 'info');
            return;
        }
        
        // –®–∞–≥ 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await processUserProductChoices(userProductChoices, budget, days, meal, start, adjustedMenu);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é:', error);
        showMessage(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏
async function generateMenuWithRealPrices(budget, days, meal, start) {
    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏...');
    
    const prompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –ø–æ–≤–∞—Ä –≤ –≥–æ—Ä–æ–¥–µ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫. –°–æ–∑–¥–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞ ${days} –¥–Ω–µ–π –¥–ª—è ${meal} —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ ${budget} ‚ÇΩ.

–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ—Ä–æ–¥–µ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫ –∏ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ "–ú–∞–∫—Å–∏". 
–¢—ã –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ë—é–¥–∂–µ—Ç: ${budget} ‚ÇΩ –Ω–∞ ${days} –¥–Ω–µ–π
- –¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: ${meal}
- –ù–∞—á–∞–ª–æ: ${start}
- –ì–æ—Ä–æ–¥: –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫
- –ú–∞–≥–∞–∑–∏–Ω: –ú–∞–∫—Å–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏
- –£—á–∏—Ç—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
- –°–æ–∑–¥–∞–≤–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞
- –£—á–∏—Ç—ã–≤–∞–π –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å

–ü–†–û–¶–ï–°–°:
1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏
2. –°–æ–∑–¥–∞–π –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
3. –†–∞—Å—Å—á–∏—Ç–∞–π –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±—é–¥–∂–µ—Ç

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "menu": [
    {
      "day": 1,
      "meal": "–ó–∞–≤—Ç—Ä–∞–∫",
      "recipe": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
      "ingredients": [
        {
          "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
          "qty": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
          "unit": "–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≥, –º–ª, —à—Ç, –∫–≥, –ª)"
        }
      ],
      "cookingTime": –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    }
  ],
  "products": [
    {
      "name": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞",
      "pack": "–æ–ø–∏—Å–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏",
      "price": —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞,
      "unit": "–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
      "qty": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
      "sum": –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    }
  ],
  "totalCost": –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await callGeminiAPI(prompt);
    const result = parseJSONResponse(response);
    
    if (!result || !result.menu || !result.products) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
    }
    
    console.log('‚úÖ –ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω:', result.menu.length, '–±–ª—é–¥');
    console.log('üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', result.totalCost, '‚ÇΩ');
    
    return result;
}

// –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é
async function updatePricesForMenu(menu) {
    console.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é...');
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    const allIngredients = [];
    menu.forEach(item => {
        if (item.ingredients && Array.isArray(item.ingredients)) {
            item.ingredients.forEach(ingredient => {
                const existingIndex = allIngredients.findIndex(ing => 
                    ing.name.toLowerCase() === ingredient.name.toLowerCase()
                );
                
                if (existingIndex >= 0) {
                    allIngredients[existingIndex].qty += ingredient.qty || 1;
                } else {
                    allIngredients.push({
                        name: ingredient.name,
                        qty: ingredient.qty || 1,
                        unit: ingredient.unit || '—à—Ç'
                    });
                }
            });
        }
    });
    
    // –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏ —á–µ—Ä–µ–∑ AI
    const products = [];
    
    for (const ingredient of allIngredients) {
        try {
            const product = await findProductInMaxiCatalog(ingredient);
            if (product) {
                products.push(product);
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ${ingredient.name} –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏:`, error.message);
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            const basicProduct = {
                name: ingredient.name,
                pack: '~',
                price: 150,
                qty: ingredient.qty,
                unit: ingredient.unit,
                sum: 150 * ingredient.qty,
                available: false,
                note: '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏'
            };
            products.push(basicProduct);
        }
    }
    
    console.log('üí∞ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', products.length, '–ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    return products;
}

// –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏ —á–µ—Ä–µ–∑ AI
async function findProductInMaxiCatalog(ingredient) {
    const prompt = `–ù–∞–π–¥–∏ –ø—Ä–æ–¥—É–∫—Ç "${ingredient.name}" –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ "–ú–∞–∫—Å–∏" –≤ –≥–æ—Ä–æ–¥–µ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫. 

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ${ingredient.name}
- –ù—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ingredient.qty} ${ingredient.unit}
- –ú–∞–≥–∞–∑–∏–Ω: –ú–∞–∫—Å–∏ (–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫)
- –ò—â–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏
- –£—á–∏—Ç—ã–≤–∞–π —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
- –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
- –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "name": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏",
  "pack": "–æ–ø–∏—Å–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏",
  "price": —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏,
  "unit": "–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
  "qty": ${ingredient.qty},
  "sum": –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å,
  "available": true
}

–ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏, –≤–µ—Ä–Ω–∏ null.`;

    const response = await callGeminiAPI(prompt);
    const product = parseJSONResponse(response);
    
    if (product && product.name && product.price) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ú–∞–∫—Å–∏: ${product.name} - ${product.price} ‚ÇΩ`);
        return product;
    }
    
    throw new Error(`–ü—Ä–æ–¥—É–∫—Ç ${ingredient.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏`);
}

// –®–∞–≥ 4: –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
async function showProductsChoiceDialog(products, budget) {
    return new Promise((resolve) => {
        const modal = document.createElement('div');
        modal.className = 'modal active';
        modal.innerHTML = `
            <div class="modal-content large">
                <div class="modal-header">
                    <h3>–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h3>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <p>–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</p>
                    
                    <div class="products-choice">
                        ${products.map((product, index) => `
                            <div class="product-choice-item" data-index="${index}">
                                <div class="product-info">
                                    <div class="product-name">
                                        <strong>${product.name}</strong>
                                        ${product.note ? `<span class="note">${product.note}</span>` : ''}
                                    </div>
                                    <div class="product-details">
                                        <span>${product.qty} ${product.unit}</span>
                                        <span class="price">${product.price} ‚ÇΩ</span>
                                        <span class="total">${product.sum} ‚ÇΩ</span>
                                    </div>
                                </div>
                                <div class="product-actions">
                                    <button class="btn btn-success add-to-shopping" data-index="${index}">
                                        <i class="fas fa-shopping-cart"></i>
                                        –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
                                    </button>
                                    <button class="btn btn-primary already-have" data-index="${index}">
                                        <i class="fas fa-check"></i>
                                        –£–∂–µ –∏–º–µ–µ—Ç—Å—è
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    
                    <div class="budget-summary">
                        <div class="total-cost">
                            <strong>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> 
                            <span id="totalCost">${products.reduce((sum, p) => sum + p.sum, 0)} ‚ÇΩ</span>
                        </div>
                        <div class="shopping-cost">
                            <strong>–î–ª—è –ø–æ–∫—É–ø–∫–∏:</strong> 
                            <span id="shoppingCost">0 ‚ÇΩ</span>
                        </div>
                    </div>
                    
                    <div class="modal-actions">
                        <button class="btn btn-secondary" id="cancelProductsChoice">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" id="confirmProductsChoice">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const productChoices = {
            shopping: [],
            alreadyHave: []
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        modal.querySelector('.close-btn').addEventListener('click', () => {
            document.body.removeChild(modal);
            resolve(null);
        });

        modal.querySelector('#cancelProductsChoice').addEventListener('click', () => {
            document.body.removeChild(modal);
            resolve(null);
        });

        modal.querySelector('#confirmProductsChoice').addEventListener('click', () => {
            document.body.removeChild(modal);
            resolve(productChoices);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
        modal.addEventListener('click', (e) => {
            if (e.target.classList.contains('add-to-shopping') || 
                e.target.closest('.add-to-shopping')) {
                const index = parseInt(e.target.dataset.index || e.target.closest('.add-to-shopping').dataset.index);
                const product = products[index];
                
                // –£–±–∏—Ä–∞–µ–º –∏–∑ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è, –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
                productChoices.alreadyHave = productChoices.alreadyHave.filter(p => p.name !== product.name);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
                if (!productChoices.shopping.find(p => p.name === product.name)) {
                    productChoices.shopping.push(product);
                }
                
                updateProductChoiceUI(modal, products, productChoices);
            }
            
            if (e.target.classList.contains('already-have') || 
                e.target.closest('.already-have')) {
                const index = parseInt(e.target.dataset.index || e.target.closest('.already-have').dataset.index);
                const product = products[index];
                
                // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫, –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
                productChoices.shopping = productChoices.shopping.filter(p => p.name !== product.name);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è
                if (!productChoices.alreadyHave.find(p => p.name === product.name)) {
                    productChoices.alreadyHave.push(product);
                }
                
                updateProductChoiceUI(modal, products, productChoices);
            }
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function updateProductChoiceUI(modal, products, productChoices) {
    const totalCost = products.reduce((sum, p) => sum + p.sum, 0);
    const shoppingCost = productChoices.shopping.reduce((sum, p) => sum + p.sum, 0);
    
    modal.querySelector('#totalCost').textContent = `${totalCost} ‚ÇΩ`;
    modal.querySelector('#shoppingCost').textContent = `${shoppingCost} ‚ÇΩ`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
    products.forEach((product, index) => {
        const item = modal.querySelector(`[data-index="${index}"]`);
        const shoppingBtn = item.querySelector('.add-to-shopping');
        const haveBtn = item.querySelector('.already-have');
        
        const inShopping = productChoices.shopping.find(p => p.name === product.name);
        const inHave = productChoices.alreadyHave.find(p => p.name === product.name);
        
        shoppingBtn.classList.toggle('active', inShopping);
        haveBtn.classList.toggle('active', inHave);
    });
}

// –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function processUserProductChoices(choices, budget, days, meal, start, menu) {
    console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã
    availableIngredients = choices.alreadyHave.map(p => `${p.name} (${p.qty} ${p.unit})`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    const shoppingList = choices.shopping;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const menuId = Date.now();
    const newMenu = {
        id: menuId,
        budget,
        days,
        meal,
        start,
        items: menu,
        totalCost: shoppingList.reduce((sum, p) => sum + p.sum, 0),
        createdAt: new Date().toISOString(),
        status: 'shopping' // –°—Ç–∞—Ç—É—Å: shopping, cooking, completed
    };

    menus.push(newMenu);
    currentMenu = newMenu;
    currentProducts = shoppingList;
    
    saveUserData();
    updateMenuSelector();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    showShoppingListDialog(shoppingList, budget, menu);
}

// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
async function showShoppingListDialog(shoppingList, budget, menu) {
    const modal = document.createElement('div');
    modal.className = 'modal active';
    modal.innerHTML = `
        <div class="modal-content large">
            <div class="modal-header">
                <h3>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <p>–û—Ç–º–µ—Ç—å—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã. –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥":</p>
                
                <div class="shopping-list">
                    ${shoppingList.map((product, index) => `
                        <div class="shopping-item" data-index="${index}">
                            <div class="product-info">
                                <label class="checkbox-container">
                                    <input type="checkbox" class="product-bought" data-index="${index}">
                                    <span class="checkmark"></span>
                                    <strong>${product.name}</strong>
                                </label>
                                <div class="product-details">
                                    <span>${product.qty} ${product.unit}</span>
                                    <span class="price">${product.price} ‚ÇΩ</span>
                                    <span class="total">${product.sum} ‚ÇΩ</span>
                                </div>
                            </div>
                            <div class="product-actions">
                                <button class="btn btn-warning find-analog" data-index="${index}">
                                    <i class="fas fa-search"></i>
                                    –ù–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <div class="shopping-progress">
                    <div class="progress-info">
                        <strong>–ö—É–ø–ª–µ–Ω–æ:</strong> 
                        <span id="boughtCount">0</span> –∏–∑ <span id="totalCount">${shoppingList.length}</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button class="btn btn-secondary" id="cancelShopping">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-primary" id="completeShopping" disabled>
                        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
    const boughtProducts = new Set();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modal.querySelector('.close-btn').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#cancelShopping').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#completeShopping').addEventListener('click', () => {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –º–µ–Ω—é
        unlockMenu(menu);
        document.body.removeChild(modal);
        showMessage('–ú–µ–Ω—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å.', 'success');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–æ–∫
    modal.addEventListener('change', (e) => {
        if (e.target.classList.contains('product-bought')) {
            const index = parseInt(e.target.dataset.index);
            const product = shoppingList[index];
            
            if (e.target.checked) {
                boughtProducts.add(product.name);
            } else {
                boughtProducts.delete(product.name);
            }
            
            updateShoppingProgress(modal, boughtProducts, shoppingList);
        }
    });

    // –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤
    modal.addEventListener('click', async (e) => {
        if (e.target.classList.contains('find-analog') || 
            e.target.closest('.find-analog')) {
            const index = parseInt(e.target.dataset.index || e.target.closest('.find-analog').dataset.index);
            const product = shoppingList[index];
            
            const analog = await findProductAnalog(product);
            if (analog) {
                // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –∞–Ω–∞–ª–æ–≥
                shoppingList[index] = analog;
                updateShoppingListUI(modal, shoppingList);
                showMessage(`–ù–∞–π–¥–µ–Ω –∞–Ω–∞–ª–æ–≥: ${analog.name}`, 'success');
            } else {
                showMessage('–ê–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
            }
        }
    });
}

// –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ AI
async function findProductAnalog(product) {
    const prompt = `–ù–∞–π–¥–∏ –∞–Ω–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ "${product.name}" –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–∞–≥–∞–∑–∏–Ω–∞ "–ú–∞–∫—Å–∏" –≤ –≥–æ—Ä–æ–¥–µ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: ${product.name} (${product.qty} ${product.unit})
- –ú–∞–≥–∞–∑–∏–Ω: –ú–∞–∫—Å–∏ (–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫)
- –ù–∞–π–¥–∏ –ø–æ—Ö–æ–∂–∏–π –ø—Ä–æ–¥—É–∫—Ç —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
- –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–Ω—É (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ)
- –ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ú–∞–∫—Å–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏",
  "pack": "–æ–ø–∏—Å–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏",
  "price": —Ü–µ–Ω–∞ –∞–Ω–∞–ª–æ–≥–∞,
  "unit": "–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
  "qty": ${product.qty},
  "sum": –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å,
  "available": true
}

–ï—Å–ª–∏ –∞–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏ null.`;

    const response = await callGeminiAPI(prompt);
    return parseJSONResponse(response);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∫—É–ø–æ–∫
function updateShoppingProgress(modal, boughtProducts, shoppingList) {
    const boughtCount = boughtProducts.size;
    const totalCount = shoppingList.length;
    const progress = (boughtCount / totalCount) * 100;
    
    modal.querySelector('#boughtCount').textContent = boughtCount;
    modal.querySelector('#totalCount').textContent = totalCount;
    modal.querySelector('#progressFill').style.width = `${progress}%`;
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≤—Å–µ –∫—É–ø–ª–µ–Ω–æ
    const completeBtn = modal.querySelector('#completeShopping');
    completeBtn.disabled = boughtCount < totalCount;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
function updateShoppingListUI(modal, shoppingList) {
    const shoppingListContainer = modal.querySelector('.shopping-list');
    shoppingListContainer.innerHTML = shoppingList.map((product, index) => `
        <div class="shopping-item" data-index="${index}">
            <div class="product-info">
                <label class="checkbox-container">
                    <input type="checkbox" class="product-bought" data-index="${index}">
                    <span class="checkmark"></span>
                    <strong>${product.name}</strong>
                </label>
                <div class="product-details">
                    <span>${product.qty} ${product.unit}</span>
                    <span class="price">${product.price} ‚ÇΩ</span>
                    <span class="total">${product.sum} ‚ÇΩ</span>
                </div>
            </div>
            <div class="product-actions">
                <button class="btn btn-warning find-analog" data-index="${index}">
                    <i class="fas fa-search"></i>
                    –ù–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥
                </button>
            </div>
        </div>
    `).join('');
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–Ω—é
function unlockMenu(menu) {
    currentMenu.status = 'cooking';
    currentMenu.items = menu;
    saveUserData();
    updateMenuUI();
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
function parseJSONResponse(response) {
    if (!response) return null;
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –∫–æ–¥–µ –±–ª–æ–∫–∞
        const codeBlockMatch = response.match(/```json\s*([\s\S]*?)\s*```/);
        if (codeBlockMatch) {
            return JSON.parse(codeBlockMatch[1]);
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞ –±–ª–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç
        return JSON.parse(response);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
        console.log('üìÑ –û—Ç–≤–µ—Ç:', response);
        return null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
async function initSupabase() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Supabase...');
    console.log('SUPABASE_CONFIG:', window.SUPABASE_CONFIG);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase (–Ω–µ –∑–∞–≥–ª—É—à–∫–∏)
    if (window.SUPABASE_CONFIG && 
        window.SUPABASE_CONFIG.url && 
        window.SUPABASE_CONFIG.anonKey &&
        window.SUPABASE_CONFIG.url !== 'https://your-project.supabase.co' &&
        window.SUPABASE_CONFIG.anonKey !== 'your-anon-key-here') {
        
        try {
            console.log('üîß –°–æ–∑–¥–∞–µ–º SupabaseClient...');
            console.log('SupabaseClient –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof SupabaseClient);
            
            if (typeof SupabaseClient !== 'function') {
                throw new Error('SupabaseClient –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            
            supabaseClient = new SupabaseClient(
                window.SUPABASE_CONFIG.url,
                window.SUPABASE_CONFIG.anonKey
            );
            
            console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...');
            const isConnected = await supabaseClient.init();
            
            if (isConnected) {
                console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                await supabaseClient.createTables();
                return { success: true, message: 'Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω' };
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
            supabaseClient = null;
            return { success: false, message: error.message };
        }
    } else {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
        supabaseClient = null;
        return { success: false, message: '–ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage' };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuth() {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    
    try {
        if (supabaseClient && supabaseClient.initialized) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ Supabase
            const session = await supabaseClient.getSession();
            if (session) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ Supabase');
                currentUser = session.user;
                await loadUserData();
                showMainApp();
                return;
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
<<<<<<< HEAD
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
        currentUser = JSON.parse(savedUser);
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ localStorage:', currentUser.email);
                    await loadUserData();
                    showMainApp();
                    return;
<<<<<<< HEAD
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
                    localStorage.removeItem('currentUser');
>>>>>>> main
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        showAuthScreen();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showAuthScreen();
    }
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthScreen() {
    console.log('üîê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const appContainer = document.querySelector('.app-container');
    if (!appContainer) return;
    
    appContainer.innerHTML = `
        <div class="auth-screen">
            <div class="auth-card">
                <div class="auth-header">
                    <h1 class="app-title">Flash Menu</h1>
                    <p class="auth-subtitle">–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –º–µ–Ω—é</p>
                </div>
                
                <div class="auth-tabs">
                    <button class="auth-tab active" data-tab="login">–í—Ö–æ–¥</button>
                    <button class="auth-tab" data-tab="register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
                </div>
                
                <!-- –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ -->
                <form id="loginForm" class="auth-form active">
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="loginEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                        <input type="password" class="form-input" id="loginPassword" required>
                    </div>
                    <div class="form-error" id="loginError"></div>
                    <button type="submit" class="btn btn-primary btn-large">
                        <i class="fas fa-sign-in-alt"></i>
                        –í–æ–π—Ç–∏
                    </button>
                </form>
                
                <!-- –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -->
                    <div class="form-group">
                        <label class="form-label">–ò–º—è</label>
                        <input type="text" class="form-input" id="registerName" required>
                    </div>
<<<<<<< HEAD
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="registerEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                        <input type="password" class="form-input" id="registerPassword" required minlength="6">
                    </div>
                    <div class="form-group">
                        <label class="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                        <input type="password" class="form-input" id="registerPasswordConfirm" required minlength="6">
                    </div>
                    <div class="form-error" id="registerError"></div>
                    <button type="submit" class="btn btn-primary btn-large">
                        <i class="fas fa-user-plus"></i>
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    </button>
    <div class="form-group">
                <label class="form-label">Email</label>
    <input type="email" class="form-input" id="registerEmail" required>
    </div>
    <div class="form-group">
                <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
    <input type="password" class="form-input" id="registerPassword" required minlength="6">
    </div>
    <div class="form-group">
                <label class="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                        <input type="password" class="form-input" id="registerPasswordConfirm" required minlength="6">
    </div>
                </form>
            </div>
        </div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupAuthEventListeners();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function setupAuthEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
    const authTabs = document.querySelectorAll('.auth-tab');
    const authForms = document.querySelectorAll('.auth-form');
    
    authTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetTab = tab.dataset.tab;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
            authTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º—É
            authForms.forEach(form => {
                form.classList.remove('active');
                if (form.id === `${targetTab}Form`) {
                    form.classList.add('active');
                }
            });
            
            // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
            document.getElementById('loginError').textContent = '';
            document.getElementById('registerError').textContent = '';
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
    const loginForm = document.getElementById('loginForm');
    loginForm.addEventListener('submit', handleLogin);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registerForm = document.getElementById('registerForm');
    registerForm.addEventListener('submit', handleRegister);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
async function handleLogin(e) {
    e.preventDefault();
    
    const email = document.getElementById('loginEmail').value.trim();
    const password = document.getElementById('loginPassword').value;
    const errorElement = document.getElementById('loginError');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    errorElement.textContent = '';
    
    if (!email || !password) {
        errorElement.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
        return;
    }
    
    try {
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', email);
        
        // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ localStorage (—Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const user = users.find(u => u.email.toLowerCase() === email.toLowerCase());
        
        if (!user) {
            errorElement.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
            return;
        }
        
        if (user.password !== password) {
            errorElement.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';        return;
=======
        return;
    }
    
>>>>>>> main
        currentUser = user;
        localStorage.setItem('currentUser', JSON.stringify(user));
        await loadUserData();
        showMainApp();
        showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        errorElement.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegister(e) {
    e.preventDefault();
    
    const name = document.getElementById('registerName').value.trim();
    const email = document.getElementById('registerEmail').value.trim();
    const password = document.getElementById('registerPassword').value;
    const passwordConfirm = document.getElementById('registerPasswordConfirm').value;
    const errorElement = document.getElementById('registerError');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    errorElement.textContent = '';
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !email || !password || !passwordConfirm) {
        errorElement.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
        return;
    }
    
    if (password !== passwordConfirm) {
        errorElement.textContent = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
        return;
    }
    
    if (password.length < 6) {
        errorElement.textContent = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
        return;
    }
    
    if (!isValidEmail(email)) {
        errorElement.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        return;
    }
    
    try {
        console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', email);
        

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ localStorage (—Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            const users = JSON.parse(localStorage.getItem('users') || '[]');            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            id: Date.now().toString(),
            name,
            email,
            password,
            createdAt: new Date().toISOString()
        };
        
        users.push(newUser);
        localStorage.setItem('users', JSON.stringify(users));
        
        if (users.find(u => u.email.toLowerCase() === email.toLowerCase())) {
            errorElement.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
                return;
            }
        const newUser = {id: Date.now().toString(),name,email,password,
                createdAt: new Date().toISOString()
            };
            
            users.push(newUser);
            localStorage.setItem('users', JSON.stringify(users));
            
>>>>>>> main
        currentUser = newUser;
        localStorage.setItem('currentUser', JSON.stringify(newUser));
        await loadUserData();
        showMainApp();
        showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        errorElement.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function showMainApp() {
    console.log('üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    const appContainer = document.querySelector('.app-container');
    if (!appContainer) return;
    
    appContainer.innerHTML = `
        <div class="app-header">
            <div class="header-content">
                <h1 class="app-title">Flash Menu</h1>
                <div class="user-menu">
                    <button class="user-menu-btn" id="userMenuBtn">
                        <i class="fas fa-user-circle"></i>
                        <span>${currentUser.name || currentUser.email}</span>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                    <div class="user-dropdown" id="userDropdown">
                        <div class="dropdown-item" id="profileBtn">
                            <i class="fas fa-user"></i>
                            –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
                        </div>
                        <div class="dropdown-item" id="settingsBtn">
                            <i class="fas fa-cog"></i>
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </div>
                        <div class="dropdown-divider"></div>
                        <div class="dropdown-item" id="logoutBtn">
                            <i class="fas fa-sign-out-alt"></i>
                            –í—ã–π—Ç–∏
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="app-content">
            <nav class="nav-tabs">
                <button class="nav-tab active" data-tab="settings">
                    <i class="fas fa-magic"></i>
                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
                </button>
                <button class="nav-tab" data-tab="shopping">
                    <i class="fas fa-shopping-basket"></i>
                    –ü–æ–∫—É–ø–∫–∏
                </button>
                <button class="nav-tab" data-tab="menu">
                    <i class="fas fa-book-open"></i>
                    –ú–µ–Ω—é
                </button>
            </nav>

            <!-- –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ -->
            <div id="settings" class="section active">
                <div class="card">
                    <h2 class="card-title">
                        <i class="fas fa-magic"></i>
                        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
                    </h2>
                    <form id="menuForm">
                        <div class="form-grid">
                            <div class="form-group">
                                <label class="form-label">–ë—é–¥–∂–µ—Ç (‚ÇΩ)</label>
                                <input type="number" class="form-input" id="budget" min="500" placeholder="–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">–°—Ä–æ–∫ (–¥–Ω–∏)</label>
                                <select class="form-input" id="days" required>
                                    <option value="1">1 –¥–µ–Ω—å</option>
                                    <option value="3">3 –¥–Ω—è</option>
                                    <option value="5">5 –¥–Ω–µ–π</option>
                                    <option value="7">7 –¥–Ω–µ–π</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">–ù–∞—á–∞–ª–æ</label>
                                <select class="form-input" id="start" required>
                                    <option value="–°–µ–≥–æ–¥–Ω—è —Å —É–∂–∏–Ω–∞">–°–µ–≥–æ–¥–Ω—è —Å —É–∂–∏–Ω–∞</option>
                                    <option value="–ó–∞–≤—Ç—Ä–∞ —Å –∑–∞–≤—Ç—Ä–∞–∫–∞">–ó–∞–≤—Ç—Ä–∞ —Å –∑–∞–≤—Ç—Ä–∞–∫–∞</option>
                                    <option value="–°–µ–≥–æ–¥–Ω—è —Å –∑–∞–≤—Ç—Ä–∞–∫–∞">–°–µ–≥–æ–¥–Ω—è —Å –∑–∞–≤—Ç—Ä–∞–∫–∞</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">–ü—Ä–∏—ë–º –ø–∏—â–∏</label>
                                <select class="form-input" id="meal" required>
                                    <option value="–í—Å–µ">–í—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏</option>
                                    <option value="–ó–∞–≤—Ç—Ä–∞–∫">–ó–∞–≤—Ç—Ä–∞–∫</option>
                                    <option value="–û–±–µ–¥">–û–±–µ–¥</option>
                                    <option value="–£–∂–∏–Ω">–£–∂–∏–Ω</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary btn-large">
                            <i class="fas fa-magic"></i>
                            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é
                        </button>
                    </form>
                </div>
            </div>

            <!-- –°–µ–∫—Ü–∏—è –ø–æ–∫—É–ø–æ–∫ -->
            <div id="shopping" class="section">
                <div class="card">
                    <h2 class="card-title">
                        <i class="fas fa-shopping-basket"></i>
                        –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
                    </h2>
                    <div id="shoppingContent">
                        <p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>
                    </div>
                </div>
            </div>

            <!-- –°–µ–∫—Ü–∏—è –º–µ–Ω—é -->
            <div id="menu" class="section">
                <div class="card">
                    <h2 class="card-title">
                        <i class="fas fa-book-open"></i>
                        –ú–µ–Ω—é
                    </h2>
                    <div class="menu-selector">
                        <select class="menu-select" id="menuSelector">
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é</option>
                        </select>
                    </div>
                    <div id="menuContent">
                        <p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>
                    </div>
                </div>
            </div>

            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <div>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é...</div>
            </div>
        </div>
    `;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupMainAppEventListeners();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadUserData();
    updateUI();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function setupMainAppEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
    const navTabs = document.querySelectorAll('.nav-tab');
    const sections = document.querySelectorAll('.section');
    
    navTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetTab = tab.dataset.tab;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
            navTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
            sections.forEach(section => {
                section.classList.remove('active');
                if (section.id === targetTab) {
                    section.classList.add('active');
                }
            });
        });
    });
    
    // –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMenuBtn = document.getElementById('userMenuBtn');
    const userDropdown = document.getElementById('userDropdown');
    
    userMenuBtn.addEventListener('click', () => {
        userDropdown.classList.toggle('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!userMenuBtn.contains(e.target) && !userDropdown.contains(e.target)) {
            userDropdown.classList.remove('active');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('profileBtn').addEventListener('click', showUserProfile);
    document.getElementById('settingsBtn').addEventListener('click', showUserSettings);
    document.getElementById('logoutBtn').addEventListener('click', handleLogout);
    
    // –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
    const menuForm = document.getElementById('menuForm');
    menuForm.addEventListener('submit', generateMenu);
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserProfile() {
    const modal = document.createElement('div');
    modal.className = 'modal active';
    modal.innerHTML = `
        <div class="modal-content large">
            <div class="modal-header">
                <h3>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="profile-sections">
                    <div class="profile-section">
                        <h4>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                        <div class="form-grid">
                            <div class="form-group">
                                <label class="form-label">–ò–º—è</label>
                                <input type="text" class="form-input" id="profileName" value="${userProfile.name}">
                            </div>
                            <div class="form-group">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-input" id="profileEmail" value="${userProfile.email}" readonly>
                            </div>
                            <div class="form-group">
                                <label class="form-label">–í–æ–∑—Ä–∞—Å—Ç</label>
                                <input type="number" class="form-input" id="profileAge" value="${userProfile.age}" min="1" max="120">
                            </div>
                            <div class="form-group">
                                <label class="form-label">–í–µ—Å (–∫–≥)</label>
                                <input type="number" class="form-input" id="profileWeight" value="${userProfile.weight}" min="30" max="200">
                            </div>
                            <div class="form-group">
                                <label class="form-label">–†–æ—Å—Ç (—Å–º)</label>
                                <input type="number" class="form-input" id="profileHeight" value="${userProfile.height}" min="100" max="250">
                            </div>
                            <div class="form-group">
                                <label class="form-label">–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</label>
                                <select class="form-input" id="profileActivity">
                                    <option value="low" ${userProfile.activity === 'low' ? 'selected' : ''}>–ù–∏–∑–∫–∏–π</option>
                                    <option value="moderate" ${userProfile.activity === 'moderate' ? 'selected' : ''}>–°—Ä–µ–¥–Ω–∏–π</option>
                                    <option value="high" ${userProfile.activity === 'high' ? 'selected' : ''}>–í—ã—Å–æ–∫–∏–π</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="profile-section">
                        <h4>–ü–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h4>
                        <div class="preferences-grid">
                            <label class="checkbox-container">
                                <input type="checkbox" id="prefVegetarian" ${userProfile.preferences.vegetarian ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="prefVegan" ${userProfile.preferences.vegan ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –í–µ–≥–∞–Ω—Å—Ç–≤–æ
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="prefGlutenFree" ${userProfile.preferences.glutenFree ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="prefLactoseFree" ${userProfile.preferences.lactoseFree ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="prefSpicy" ${userProfile.preferences.spicy ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –û—Å—Ç—Ä–∞—è –ø–∏—â–∞
                            </label>
                        </div>
                    </div>
                    
                    <div class="profile-section">
                        <h4>–¶–µ–ª–∏</h4>
                        <div class="goals-grid">
                            <label class="checkbox-container">
                                <input type="checkbox" id="goalWeightLoss" ${userProfile.goals.weightLoss ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –ü–æ—Ö—É–¥–µ–Ω–∏–µ
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="goalWeightGain" ${userProfile.goals.weightGain ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –ù–∞–±–æ—Ä –≤–µ—Å–∞
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="goalMaintenance" ${userProfile.goals.maintenance ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞
                            </label>
                            <label class="checkbox-container">
                                <input type="checkbox" id="goalMuscleGain" ${userProfile.goals.muscleGain ? 'checked' : ''}>
                                <span class="checkmark"></span>
                                –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
                            </label>
                        </div>
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button class="btn btn-secondary" id="cancelProfile">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-primary" id="saveProfile">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modal.querySelector('.close-btn').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#cancelProfile').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#saveProfile').addEventListener('click', () => {
        saveUserProfile(modal);
        document.body.removeChild(modal);
        showMessage('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserProfile(modal) {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    userProfile.name = modal.querySelector('#profileName').value;
    userProfile.email = modal.querySelector('#profileEmail').value;
    userProfile.age = parseInt(modal.querySelector('#profileAge').value);
    userProfile.weight = parseFloat(modal.querySelector('#profileWeight').value);
    userProfile.height = parseInt(modal.querySelector('#profileHeight').value);
    userProfile.activity = modal.querySelector('#profileActivity').value;
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    userProfile.preferences.vegetarian = modal.querySelector('#prefVegetarian').checked;
    userProfile.preferences.vegan = modal.querySelector('#prefVegan').checked;
    userProfile.preferences.glutenFree = modal.querySelector('#prefGlutenFree').checked;
    userProfile.preferences.lactoseFree = modal.querySelector('#prefLactoseFree').checked;
    userProfile.preferences.spicy = modal.querySelector('#prefSpicy').checked;
    
    // –¶–µ–ª–∏
    userProfile.goals.weightLoss = modal.querySelector('#goalWeightLoss').checked;
    userProfile.goals.weightGain = modal.querySelector('#goalWeightGain').checked;
    userProfile.goals.maintenance = modal.querySelector('#goalMaintenance').checked;
    userProfile.goals.muscleGain = modal.querySelector('#goalMuscleGain').checked;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    saveUserData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userNameSpan = document.querySelector('.user-menu-btn span');
    if (userNameSpan) {
        userNameSpan.textContent = userProfile.name || currentUser.email;
    }
}

// –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserSettings() {
    const modal = document.createElement('div');
    modal.className = 'modal active';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="settings-section">
                    <h4>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
                    <button class="btn btn-secondary" id="changePasswordBtn">
                        <i class="fas fa-key"></i>
                        –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                    </button>
                </div>
                
                <div class="settings-section">
                    <h4>–î–∞–Ω–Ω—ã–µ</h4>
                    <button class="btn btn-warning" id="clearDataBtn">
                        <i class="fas fa-trash"></i>
                        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    </button>
                </div>
                
                <div class="modal-actions">
                    <button class="btn btn-secondary" id="cancelSettings">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modal.querySelector('.close-btn').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#cancelSettings').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#changePasswordBtn').addEventListener('click', () => {
        showChangePasswordDialog();
    });

    modal.querySelector('#clearDataBtn').addEventListener('click', () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
            clearAllUserData();
            document.body.removeChild(modal);
            showMessage('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', 'success');
        }
    });
}

// –î–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
function showChangePasswordDialog() {
    const modal = document.createElement('div');
    modal.className = 'modal active';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="form-label">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</label>
                    <input type="password" class="form-input" id="currentPassword" required>
                </div>
                <div class="form-group">
                    <label class="form-label">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                    <input type="password" class="form-input" id="newPassword" required minlength="6">
                </div>
                <div class="form-group">
                    <label class="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                    <input type="password" class="form-input" id="confirmNewPassword" required minlength="6">
                </div>
                <div class="form-error" id="passwordError"></div>
                
                <div class="modal-actions">
                    <button class="btn btn-secondary" id="cancelPassword">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-primary" id="savePassword">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modal.querySelector('.close-btn').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#cancelPassword').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('#savePassword').addEventListener('click', async () => {
        const currentPassword = modal.querySelector('#currentPassword').value;
        const newPassword = modal.querySelector('#newPassword').value;
        const confirmNewPassword = modal.querySelector('#confirmNewPassword').value;
        const errorElement = modal.querySelector('#passwordError');
        
        errorElement.textContent = '';
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!currentPassword || !newPassword || !confirmNewPassword) {
            errorElement.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
            return;
        }
        
        if (newPassword !== confirmNewPassword) {
            errorElement.textContent = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
            return;
        }
        
        if (newPassword.length < 6) {
            errorElement.textContent = '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
            return;
    }
>>>>>>> main
        
        try {
            // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ localStorage (—Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if (currentUser.password !== currentPassword) {
                errorElement.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å';
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            currentUser.password = newPassword;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            const userIndex = users.findIndex(u => u.id === currentUser.id);
            if (userIndex >= 0) {
                users[userIndex].password = newPassword;
                localStorage.setItem('users', JSON.stringify(users));
            }
            
            document.body.removeChild(modal);
            showMessage('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
            errorElement.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è';
        }
    });
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function handleLogout() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser = null;
        localStorage.removeItem('currentUser');
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        menus = [];
        currentProducts = [];
        boughtProducts = [];
        availableIngredients = [];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        showAuthScreen();
        showMessage('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
    }
} 

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage (—Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        const userData = safeJsonParse(localStorage.getItem(`userData_${currentUser.id}`), {});
        
        menus = userData.menus || [];
        currentProducts = userData.currentProducts || [];
        boughtProducts = userData.boughtProducts || [];
        availableIngredients = userData.availableIngredients || [];
        userProfile = userData.userProfile || userProfile;
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        console.log('üìã –ú–µ–Ω—é:', menus.length);
        console.log('üõí –ü—Ä–æ–¥—É–∫—Ç—ã:', currentProducts.length);
        console.log('‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã–µ:', boughtProducts.length);
        console.log('ü•ò –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:', availableIngredients.length);
<<<<<<< HEAD
    }    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        menus = [];
        currentProducts = [];
        boughtProducts = [];
        availableIngredients = [];
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserData() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    if (!currentUser) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    
    const userData = {
        menus,
        currentProducts,
        boughtProducts,
        availableIngredients,
        userProfile,
        updatedAt: new Date().toISOString()
    };
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (—Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        localStorage.setItem(`userData_${currentUser.id}`, JSON.stringify(userData));
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ showAuthScreen() –∏ showMainApp()
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
function testApiKey() {
    console.log('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    const hasApiKeys = window.GEMINI_API_KEY_1 && 
                      window.GEMINI_API_KEY_1 !== '[–í–ê–®_API_–ö–õ–Æ–ß]' &&
                      window.GEMINI_API_KEY_1 !== '[–í–ê–®_API_–ö–õ–Æ–ß_1]';
    
    if (hasApiKeys) {
        console.log('‚úÖ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
        console.log('‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Mock —Ä–µ–∂–∏–º');
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function clearCorruptedData() {
    console.log('üßπ –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º localStorage
        const keys = Object.keys(localStorage);
        keys.forEach(key => {
            try {
                const value = localStorage.getItem(key);
                if (value && (key.includes('userData') || key.includes('currentUser') || key.includes('users'))) {
                    JSON.parse(value);
                }
            } catch (error) {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${key}`);
                localStorage.removeItem(key);
            }
        });
        
        console.log('‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
function safeJsonParse(jsonString, defaultValue = null) {
    if (!jsonString) return defaultValue;
    
    try {
        return JSON.parse(jsonString);
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
        return defaultValue;
    }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearAllUserData() {
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    menus = [];
    currentProducts = [];
    boughtProducts = [];
    availableIngredients = [];
    
    // –û—á–∏—â–∞–µ–º localStorage
    if (currentUser) {
        localStorage.removeItem(`userData_${currentUser.id}`);
    }
    localStorage.removeItem('currentUser');
    
    // –û—á–∏—â–∞–µ–º Supabase (–µ—Å–ª–∏ –±—ã –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    // if (supabaseClient && supabaseClient.initialized) {
    //     supabaseClient.clearUserData(currentUser?.id);
    // }
    
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã');
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading(show) {
    const loading = document.getElementById('loading');
    if (loading) {
        loading.classList.toggle('active', show);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, type = 'info') {
    console.log(`üì¢ ${type.toUpperCase()}: ${text}`);
    
    const message = document.createElement('div');
    message.className = `message ${type}`;
    message.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${text}
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.querySelector('.app-content') || document.querySelector('.auth-screen');
    if (container) {
        container.insertBefore(message, container.firstChild);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (message.parentNode) {
                message.remove();
            }
        }, 5000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    console.log('üé® –û–±–Ω–æ–≤–ª—è–µ–º UI...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–µ–Ω—é
    updateMenuSelector();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
    updateShoppingUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
    updateMenuUI();
    
    console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–µ–Ω—é
function updateMenuSelector() {
    const menuSelector = document.getElementById('menuSelector');
    if (!menuSelector) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
    menuSelector.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é</option>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ–Ω—é
    menus.forEach((menu, index) => {
        const option = document.createElement('option');
        option.value = index;
        option.textContent = `–ú–µ–Ω—é ${index + 1} (${menu.budget} ‚ÇΩ, ${menu.days} –¥–Ω.)`;
        menuSelector.appendChild(option);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
    if (currentMenu) {
        const currentIndex = menus.findIndex(menu => menu.id === currentMenu.id);
        if (currentIndex >= 0) {
            menuSelector.value = currentIndex;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    menuSelector.addEventListener('change', (e) => {
        const selectedIndex = parseInt(e.target.value);
        if (selectedIndex >= 0 && selectedIndex < menus.length) {
            currentMenu = menus[selectedIndex];
            updateMenuUI();
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ–∫—É–ø–æ–∫
function updateShoppingUI() {
    const shoppingContent = document.getElementById('shoppingContent');
    if (!shoppingContent) return;
    
    if (currentProducts.length === 0) {
        shoppingContent.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>';
        return;
    }

    shoppingContent.innerHTML = `
        <div class="available-ingredients">
            <div class="ingredients-title">–ò–º–µ—é—â–∏–µ—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</div>
            <div class="ingredients-list">${availableIngredients.length > 0 ? availableIngredients.join(', ') : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤'}</div>
        </div>
        
        <div class="search-box">
            <input type="text" class="search-input" id="searchProducts" placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º...">
        </div>
        
        <div id="productsList"></div>
        
        <div class="total-sum" id="totalSum"></div>
        
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>
        
        <button class="btn btn-success" id="markAllBought">–£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã</button>
        <button class="btn btn-danger" id="resetList">–°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫</button>
        <button class="btn btn-warning" id="clearAllData">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</button>
    `;

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.getElementById('searchProducts')?.addEventListener('input', filterProducts);
    document.getElementById('markAllBought')?.addEventListener('click', markAllAsBought);
    document.getElementById('resetList')?.addEventListener('click', resetShoppingList);
    document.getElementById('clearAllData')?.addEventListener('click', clearAllUserData);

    renderProductsList();
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderProductsList() {
    const productsList = document.getElementById('productsList');
    if (!productsList) return;

    // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    productsList.innerHTML = '';
    currentProducts.forEach((product, index) => {
        if (!boughtProducts.includes(index)) {
            const productCard = document.createElement('div');
            productCard.className = 'product-card';
            productCard.innerHTML = `
                <input type="checkbox" class="checkbox" data-index="${index}">
                <div class="product-info">
                    <div class="product-name">${product.name}</div>
                    <div class="product-details">${product.pack} ‚Ä¢ ${product.qty} ${product.unit}</div>
                </div>
                <div class="product-price">${product.sum.toFixed(2)} ‚ÇΩ</div>
            `;
            
            productCard.querySelector('.checkbox').addEventListener('change', (e) => {
                if (e.target.checked) {
                    boughtProducts.push(index);
                    availableIngredients.push(`${product.name} (${product.qty} ${product.unit})`);
                } else {
                    const idx = boughtProducts.indexOf(index);
                    if (idx > -1) {
                        boughtProducts.splice(idx, 1);
                        const ingredientIdx = availableIngredients.findIndex(ing => ing.includes(product.name));
                        if (ingredientIdx > -1) {
                            availableIngredients.splice(ingredientIdx, 1);
                        }
                    }
                }
                saveUserData();
                renderProductsList();
                updateMenuStatus();
            });
            
            productsList.appendChild(productCard);
        }
    });

    // –û–±—â–∞—è —Å—É–º–º–∞
    const totalSum = document.getElementById('totalSum');
    if (totalSum) {
        const totalCost = boughtProducts.reduce((sum, index) => sum + currentProducts[index].sum, 0);
        totalSum.innerHTML = `–ò—Ç–æ–≥–æ –∫—É–ø–ª–µ–Ω–æ: <strong>${totalCost.toFixed(2)} ‚ÇΩ</strong>`;
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressFill = document.getElementById('progressFill');
    if (progressFill) {
        const progress = currentProducts.length > 0 ? (boughtProducts.length / currentProducts.length) * 100 : 0;
        progressFill.style.width = `${progress}%`;
>>>>>>> main
        progressFill.style.backgroundColor = progress === 100 ? '#10b981' : '#6366f1';
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function filterProducts() {
    const searchTerm = document.getElementById('searchProducts').value.toLowerCase();
    const productCards = document.querySelectorAll('.product-card');
    
    productCards.forEach(card => {
        const productName = card.querySelector('.product-name').textContent.toLowerCase();
        if (productName.includes(searchTerm)) {
            card.style.display = 'flex';
        } else {
            card.style.display = 'none';
        }
    });
}

// –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
function markAllAsBought() {
    currentProducts.forEach((product, index) => {
        if (!boughtProducts.includes(index)) {
            boughtProducts.push(index);
            availableIngredients.push(`${product.name} (${product.qty} ${product.unit})`);
        }
    });
    
    saveUserData();
    renderProductsList();
    showMessage('–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ!', 'success');
}

// –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
function resetShoppingList() {
    boughtProducts = [];
    saveUserData();
    renderProductsList();
    showMessage('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å–±—Ä–æ—à–µ–Ω!', 'success');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –º–µ–Ω—é
function updateMenuUI() {
    const menuContent = document.getElementById('menuContent');
    if (!menuContent) return;
    
    if (menus.length === 0) {
        menuContent.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>';
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é
    currentMenu = menus[menus.length - 1];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω—é
    const isMenuLocked = currentMenu.status === 'shopping' || currentMenu.status === undefined;
    const menuClass = isMenuLocked ? 'menu-locked' : '';

    menuContent.innerHTML = `
        <div class="menu-header">
            <h3>–ú–µ–Ω—é –Ω–∞ ${currentMenu.days} –¥–Ω–µ–π (${currentMenu.meal})</h3>
            <p>–ë—é–¥–∂–µ—Ç: ${currentMenu.totalCost} ‚ÇΩ</p>
            <div class="menu-status" id="menuStatus">
                <span class="status-indicator ${isMenuLocked ? 'inactive' : 'active'}">
                    ${isMenuLocked ? 'üîí –ú–µ–Ω—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' : '‚úÖ –ú–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ'}
                </span>
            </div>
        </div>
        
        <div id="menuItems" class="${menuClass}"></div>
        
        <div class="menu-actions">
            <button class="btn btn-success" id="generateNewMenu">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é</button>
            ${isMenuLocked ? '<button class="btn btn-primary" id="continueShopping">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏</button>' : ''}
        </div>
    `;

    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('generateNewMenu').addEventListener('click', () => {
        const navTabs = document.querySelectorAll('.nav-tab');
        const sections = document.querySelectorAll('.section');
        
        navTabs.forEach(t => t.classList.remove('active'));
        sections.forEach(s => s.classList.remove('active'));
        
        document.querySelector('[data-tab="settings"]').classList.add('active');
        document.getElementById('settings').classList.add('active');
    });
    
    const continueShoppingBtn = document.getElementById('continueShopping');
    if (continueShoppingBtn) {
        continueShoppingBtn.addEventListener('click', () => {
            showShoppingListDialog(currentProducts, currentMenu.budget, currentMenu.items);
        });
    }

    renderMenuItems();
    updateMenuStatus();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω—é
function updateMenuStatus() {
    const menuStatus = document.getElementById('menuStatus');
    if (!menuStatus) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const allProductsBought = currentProducts.length > 0 && boughtProducts.length === currentProducts.length;
    
    if (allProductsBought) {
        menuStatus.innerHTML = '<span class="status-indicator active">‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∫—É–ø–ª–µ–Ω—ã! –ú–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ</span>';
    } else {
        const boughtCount = boughtProducts.length;
        const totalCount = currentProducts.length;
        menuStatus.innerHTML = `<span class="status-indicator inactive">‚è≥ –ö—É–ø–ª–µ–Ω–æ ${boughtCount} –∏–∑ ${totalCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤</span>`;
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
function renderMenuItems() {
    const menuItems = document.getElementById('menuItems');
    if (!menuItems) return;
    
    if (!currentMenu) {
        menuItems.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω—é</p>';
        return;
    }

    menuItems.innerHTML = '';
    
    if (!currentMenu.items || currentMenu.items.length === 0) {
        menuItems.innerHTML = '<p>–í –º–µ–Ω—é –Ω–µ—Ç –±–ª—é–¥</p>';
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –¥–Ω—è–º
    const dishesByDay = {};
    currentMenu.items.forEach(item => {
        if (!dishesByDay[item.day]) {
            dishesByDay[item.day] = [];
        }
        dishesByDay[item.day].push(item);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–æ–∫
    const allProductsBought = currentProducts.length > 0 && boughtProducts.length === currentProducts.length;

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    Object.keys(dishesByDay).forEach(day => {
        const daySection = document.createElement('div');
        daySection.className = 'day-section';
        daySection.innerHTML = `
            <h4 class="day-title">${day}</h4>
            <div class="day-meals">
                ${dishesByDay[day].map((item, index) => `
                    <div class="meal-card ${allProductsBought ? 'active' : 'inactive'}" data-day="${day}" data-meal="${item.meal}">
                        <div class="meal-header">
                            <h5>${item.meal}</h5>
                            ${item.cookingTime ? `<span class="cooking-time">‚è±Ô∏è ${item.cookingTime} –º–∏–Ω</span>` : ''}
<<<<<<< HEAD
    </div>
            </div>
                        <div class="meal-preview">
                            <p class="recipe-preview">${item.recipe.substring(0, 100)}${item.recipe.length > 100 ? '...' : ''}</p>
            </div>
>>>>>>> main
                        ${allProductsBought ? `
                            <button class="btn btn-primary btn-sm start-cooking" data-day="${day}" data-meal="${item.meal}">
                                üç≥ –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å
                            </button>
                        ` : `
                            <div class="meal-locked">
                                üîí –ö—É–ø–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                            </div>
                        `}
                    </div>
                `).join('')}
            </div>
        `;
        
        menuItems.appendChild(daySection);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ—Ç–æ–≤–∫–∏
    document.querySelectorAll('.start-cooking').forEach(button => {
        button.addEventListener('click', (e) => {
            const day = e.target.dataset.day;
            const meal = e.target.dataset.meal;
            showMealDetails(day, meal);
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª—é–¥
    document.querySelectorAll('.meal-card').forEach(card => {
        card.addEventListener('click', (e) => {
            if (!e.target.classList.contains('start-cooking')) {
                const day = card.dataset.day;
                const meal = card.dataset.meal;
                showMealDetails(day, meal);
            }
        });
    });
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –±–ª—é–¥–∞
function showMealDetails(day, meal) {
    const mealItem = currentMenu.items.find(item => item.day === day && item.meal === meal);
    if (!mealItem) return;

    const modal = document.createElement('div');
    modal.className = 'modal active';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${day} - ${meal}</h3>
                <button class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="recipe-section">
                    <h4>–†–µ—Ü–µ–ø—Ç</h4>
                    <p>${mealItem.recipe}</p>
                </div>
                
                <div class="ingredients-section">
                    <h4>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</h4>
                    <ul>
                        ${mealItem.ingredients.map(ing => `
                            <li>${ing.name} - ${ing.qty} ${ing.unit}</li>
                        `).join('')}
                    </ul>
                </div>
                
                ${mealItem.cookingTime ? `
                    <div class="cooking-section">
                        <h4>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ${mealItem.cookingTime} –º–∏–Ω—É—Ç</h4>
                        <button class="btn btn-success start-timer" data-time="${mealItem.cookingTime}">
                            ‚è∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
                        </button>
                    </div>
                ` : ''}
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    modal.querySelector('.close-btn').addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    modal.querySelector('.start-timer')?.addEventListener('click', (e) => {
        const time = parseInt(e.target.dataset.time);
        startTimer(time);
        document.body.removeChild(modal);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer(minutes) {
    if (activeTimer) {
        clearInterval(activeTimer);
    }

    let timeLeft = minutes * 60;

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let timer = document.getElementById('timer');
    if (!timer) {
        const timerHTML = `
            <div class="timer active" id="timer">
                <div class="timer-display" id="timerDisplay">${Math.floor(timeLeft / 60).toString().padStart(2, '0')}:${(timeLeft % 60).toString().padStart(2, '0')}</div>
                <button class="btn btn-primary" id="stopTimer">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä</button>
            </div>
        `;
        document.querySelector('.app-content').insertAdjacentHTML('beforeend', timerHTML);
        
        document.getElementById('stopTimer').addEventListener('click', stopTimer);
    } else {
        timer.classList.add('active');
    }

    activeTimer = setInterval(() => {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        
        const timerDisplay = document.getElementById('timerDisplay');
        if (timerDisplay) {
            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        if (timeLeft <= 0) {
            clearInterval(activeTimer);
            activeTimer = null;
            const timerElement = document.getElementById('timer');
            if (timerElement) {
                timerElement.classList.remove('active');
            }
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (Notification.permission === 'granted') {
                new Notification('–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏!', {
                    body: '–í–∞—à–µ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!',
                    icon: '/favicon.ico'
                });
            } else {
                alert('–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏! –í–∞—à–µ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!');
            }
        }
        
        timeLeft--;
    }, 1000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function stopTimer() {
    if (activeTimer) {
        clearInterval(activeTimer);
        activeTimer = null;
    }
    const timer = document.getElementById('timer');
    if (timer) {
        timer.classList.remove('active');
    }
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
if ('Notification' in window) {
    Notification.requestPermission();
} 