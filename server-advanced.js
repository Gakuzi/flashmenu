const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'file://'],
    credentials: true
}));
app.use(express.json());
app.use(express.static('.'));

// API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç—ã GitHub Actions)
let ALTERNATIVE_KEYS = [];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const loadApiKeys = () => {
    const keys = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API –∫–ª—é—á–µ–π
    for (let i = 1; i <= 8; i++) {
        const key = process.env[`GEMINI_API_KEY_${i}`];
        if (key && key !== 'your-api-key-here') {
            keys.push(key);
        }
    }
    
    // –ï—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
    if (keys.length === 0) {
        console.warn('‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ');
        keys.push(
            'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4', // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
            'AIzaSyDKVM2qJQ4lXfjZpQVm9ymxf_GiwMkDBHs'  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        );
    }
    
    return keys;
};

ALTERNATIVE_KEYS = loadApiKeys();
console.log(`üîë –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ALTERNATIVE_KEYS.length} API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è Gemini API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–π
app.post('/api/gemini', async (req, res) => {
    try {
        const { prompt } = req.body;
        
        if (!prompt) {
            return res.status(400).json({ error: 'Prompt is required' });
        }

        console.log('ü§ñ Gemini API –∑–∞–ø—Ä–æ—Å:', prompt.substring(0, 100) + '...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç API
        if (global.apiQuotaExceeded) {
            console.log('‚ö†Ô∏è –õ–∏–º–∏—Ç API –ø—Ä–µ–≤—ã—à–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock API');
            return res.json({
                candidates: [{
                    content: {
                        parts: [{
                            text: generateMockResponse(prompt)
                        }]
                    }
                }]
            });
        }

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –∫–ª—é—á–∏
        let lastError = null;
        
        for (let i = 0; i < ALTERNATIVE_KEYS.length; i++) {
            const apiKey = ALTERNATIVE_KEYS[i];
            console.log(`üîë –ü—Ä–æ–±—É–µ–º API –∫–ª—é—á ${i + 1}/${ALTERNATIVE_KEYS.length}...`);
            
            try {
                const result = await callGeminiWithKey(apiKey, prompt);
                console.log(`‚úÖ –£—Å–ø–µ—Ö —Å –∫–ª—é—á–æ–º ${i + 1}`);
                return res.json(result);
            } catch (error) {
                console.warn(`‚ùå –ö–ª—é—á ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                lastError = error;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞, –ø–æ–º–µ—á–∞–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock API
                if (error.message.includes('quota') || error.message.includes('rate-limit')) {
                    console.log('üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Mock API');
                    global.apiQuotaExceeded = true;
                    break;
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                if (error.message.includes('location') || error.message.includes('geographic')) {
                    continue;
                }
                
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
                break;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock API
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock API –∫–∞–∫ fallback');
        const mockResponse = {
            candidates: [{
                content: {
                    parts: [{
                        text: generateMockResponse(prompt)
                    }]
                }
            }]
        };
        
        res.json(mockResponse);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ 
            error: 'Internal Server Error',
            message: error.message 
        });
    }
});

// –í—ã–∑–æ–≤ Gemini API —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
async function callGeminiWithKey(apiKey, prompt) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`;
    
    const requestBody = {
        contents: [{
            parts: [{
                text: prompt
            }]
        }],
        generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è Gemini 2.0
        },
        safetySettings: [
            {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                category: "HARM_CATEGORY_HATE_SPEECH",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]
    };

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Gemini API –æ—à–∏–±–∫–∞:', response.status, errorText);
        
        if (response.status === 429 || response.status === 403) {
            throw new Error('API quota exceeded or rate limited');
        }
        
        throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    return data;
}

// –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ AI (–∏–º–∏—Ç–∞—Ü–∏—è Gemini API)
function generateMockResponse(prompt) {
    console.log('üé≠ Mock API –∑–∞–ø—Ä–æ—Å:', prompt);
    
    if (prompt.includes('–º–µ–Ω—é') || prompt.includes('—Ä–µ—Ü–µ–ø—Ç')) {
        return generateSmartMenu(prompt);
    } else if (prompt.includes('—Ü–µ–Ω–∞') || prompt.includes('–ú–∞–∫—Å–∏') || prompt.includes('–∫–∞—Ç–∞–ª–æ–≥')) {
        return getRealisticPrices(prompt);
    } else {
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –º–µ–Ω—é –∏–ª–∏ —Ü–µ–Ω–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.';
    }
}

// –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
function generateSmartMenu(prompt) {
    console.log('üçΩÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ –º–µ–Ω—é...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const budget = prompt.match(/(\d+)\s*‚ÇΩ/)?.[1] || 1000;
    const days = prompt.match(/(\d+)\s*–¥–Ω–µ–π?/)?.[1] || 3;
    const mealType = prompt.includes('–∑–∞–≤—Ç—Ä–∞–∫') ? '–∑–∞–≤—Ç—Ä–∞–∫' : 
                     prompt.includes('–æ–±–µ–¥') ? '–æ–±–µ–¥' : 
                     prompt.includes('—É–∂–∏–Ω') ? '—É–∂–∏–Ω' : '–≤—Å–µ';
    
    console.log(`üí∞ –ë—é–¥–∂–µ—Ç: ${budget} ‚ÇΩ, üìÖ –î–Ω–∏: ${days}, üçΩÔ∏è –¢–∏–ø: ${mealType}`);
    
    // –ë–∞–∑–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
    const recipes = {
        breakfast: [
            {
                name: "–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏",
                ingredients: [
                    { name: "–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è", qty: 80, unit: "–≥", price: 89.90, pack: "500–≥" },
                    { name: "–ú–æ–ª–æ–∫–æ 3.2%", qty: 200, unit: "–º–ª", price: 89.90, pack: "1–ª" },
                    { name: "–ë–∞–Ω–∞–Ω", qty: 1, unit: "—à—Ç", price: 129.90, pack: "1–∫–≥" },
                    { name: "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", qty: 20, unit: "–≥", price: 299.90, pack: "200–≥" }
                ],
                cookingTime: 15,
                difficulty: "–ª–µ–≥–∫–æ"
            },
            {
                name: "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –∏–∑—é–º–æ–º",
                ingredients: [
                    { name: "–¢–≤–æ—Ä–æ–≥ 5%", qty: 200, unit: "–≥", price: 89.90, pack: "200–≥" },
                    { name: "–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", qty: 2, unit: "—à—Ç", price: 129.90, pack: "10—à—Ç" },
                    { name: "–ò–∑—é–º", qty: 50, unit: "–≥", price: 149.90, pack: "200–≥" },
                    { name: "–°–∞—Ö–∞—Ä-–ø–µ—Å–æ–∫", qty: 30, unit: "–≥", price: 69.90, pack: "1–∫–≥" }
                ],
                cookingTime: 25,
                difficulty: "—Å—Ä–µ–¥–Ω–µ"
            }
        ],
        lunch: [
            {
                name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏",
                ingredients: [
                    { name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Ñ–∏–ª–µ", qty: 150, unit: "–≥", price: 399.90, pack: "1–∫–≥" },
                    { name: "–†–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π", qty: 100, unit: "–≥", price: 149.90, pack: "900–≥" },
                    { name: "–ë—Ä–æ–∫–∫–æ–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è", qty: 100, unit: "–≥", price: 199.90, pack: "400–≥" },
                    { name: "–ú–æ—Ä–∫–æ–≤—å", qty: 50, unit: "–≥", price: 79.90, pack: "1–∫–≥" }
                ],
                cookingTime: 30,
                difficulty: "—Å—Ä–µ–¥–Ω–µ"
            },
            {
                name: "–õ–æ—Å–æ—Å—å —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ –∑–µ–ª–µ–Ω—å—é",
                ingredients: [
                    { name: "–õ–æ—Å–æ—Å—å —Ñ–∏–ª–µ", qty: 150, unit: "–≥", price: 599.90, pack: "300–≥" },
                    { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", qty: 200, unit: "–≥", price: 89.90, pack: "1–∫–≥" },
                    { name: "–õ–∏–º–æ–Ω", qty: 0.5, unit: "—à—Ç", price: 199.90, pack: "1–∫–≥" },
                    { name: "–£–∫—Ä–æ–ø —Å–≤–µ–∂–∏–π", qty: 10, unit: "–≥", price: 89.90, pack: "50–≥" }
                ],
                cookingTime: 35,
                difficulty: "—Å—Ä–µ–¥–Ω–µ"
            }
        ],
        dinner: [
            {
                name: "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏ –∏ —Å—ã—Ä–æ–º",
                ingredients: [
                    { name: "–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ", qty: 3, unit: "—à—Ç", price: 129.90, pack: "10—à—Ç" },
                    { name: "–ü–æ–º–∏–¥–æ—Ä—ã", qty: 100, unit: "–≥", price: 199.90, pack: "1–∫–≥" },
                    { name: "–®–ø–∏–Ω–∞—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π", qty: 50, unit: "–≥", price: 179.90, pack: "400–≥" },
                    { name: "–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π", qty: 50, unit: "–≥", price: 189.90, pack: "200–≥" }
                ],
                cookingTime: 15,
                difficulty: "–ª–µ–≥–∫–æ"
            }
        ]
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞
    let menuItems = [];
    let totalCost = 0;
    
    for (let day = 1; day <= days; day++) {
        if (mealType === '–≤—Å–µ' || mealType === '–∑–∞–≤—Ç—Ä–∞–∫') {
            const breakfast = recipes.breakfast[day % recipes.breakfast.length];
            const breakfastCost = breakfast.ingredients.reduce((sum, ing) => sum + ing.price, 0);
            
            if (totalCost + breakfastCost <= budget) {
                menuItems.push({
                    day: `–î–µ–Ω—å ${day}`,
                    meal: "–ó–∞–≤—Ç—Ä–∞–∫",
                    recipe: breakfast.name,
                    ingredients: breakfast.ingredients,
                    cookingTime: breakfast.cookingTime,
                    difficulty: breakfast.difficulty,
                    cost: breakfastCost
                });
                totalCost += breakfastCost;
            }
        }
        
        if (mealType === '–≤—Å–µ' || mealType === '–æ–±–µ–¥') {
            const lunch = recipes.lunch[day % recipes.lunch.length];
            const lunchCost = lunch.ingredients.reduce((sum, ing) => sum + ing.price, 0);
            
            if (totalCost + lunchCost <= budget) {
                menuItems.push({
                    day: `–î–µ–Ω—å ${day}`,
                    meal: "–û–±–µ–¥",
                    recipe: lunch.name,
                    ingredients: lunch.ingredients,
                    cookingTime: lunch.cookingTime,
                    difficulty: lunch.difficulty,
                    cost: lunchCost
                });
                totalCost += lunchCost;
            }
        }
        
        if (mealType === '–≤—Å–µ' || mealType === '—É–∂–∏–Ω') {
            const dinner = recipes.dinner[day % recipes.dinner.length];
            const dinnerCost = dinner.ingredients.reduce((sum, ing) => sum + ing.price, 0);
            
            if (totalCost + dinnerCost <= budget) {
                menuItems.push({
                    day: `–î–µ–Ω—å ${day}`,
                    meal: "–£–∂–∏–Ω",
                    recipe: dinner.name,
                    ingredients: dinner.ingredients,
                    cookingTime: dinner.cookingTime,
                    difficulty: dinner.difficulty,
                    cost: dinnerCost
                });
                totalCost += dinnerCost;
            }
        }
    }
    
    // –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é
    if (totalCost > budget) {
        console.log(`‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω (${totalCost} > ${budget}), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º...`);
        menuItems = menuItems.slice(0, Math.floor(menuItems.length * 0.7)); // –£–±–∏—Ä–∞–µ–º 30% –±–ª—é–¥
        totalCost = menuItems.reduce((sum, item) => sum + item.cost, 0);
    }
    
    console.log(`‚úÖ –ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${menuItems.length} –±–ª—é–¥, —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost} ‚ÇΩ`);
    
    return `\`\`\`json
${JSON.stringify({
    menu: menuItems,
    totalCost: totalCost,
    budget: budget,
    days: days,
    mealType: mealType,
    generatedAt: new Date().toISOString()
}, null, 2)}
\`\`\``;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏
function getRealisticPrices(prompt) {
    console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const productMatch = prompt.match(/–ø—Ä–æ–¥—É–∫—Ç[–∞]?\s*[""]([^""]+)[""]/);
    const productName = productMatch ? productMatch[1].toLowerCase() : '';
    
    console.log(`üîç –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç: "${productName}"`);
    
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ú–∞–∫—Å–∏
    const catalog = {
        // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        '–º–æ–ª–æ–∫–æ': { name: '–ú–æ–ª–æ–∫–æ 3.2%', price: 89.90, pack: '1–ª', brand: '–ú–∞–∫—Å–∏' },
        '—Ç–≤–æ—Ä–æ–≥': { name: '–¢–≤–æ—Ä–æ–≥ 5%', price: 89.90, pack: '200–≥', brand: '–ú–∞–∫—Å–∏' },
        '—Å–º–µ—Ç–∞–Ω–∞': { name: '–°–º–µ—Ç–∞–Ω–∞ 20%', price: 89.90, pack: '400–≥', brand: '–ú–∞–∫—Å–∏' },
        '—Å—ã—Ä': { name: '–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π', price: 189.90, pack: '200–≥', brand: '–ú–∞–∫—Å–∏' },
        
        // –ú—è—Å–æ –∏ —Ä—ã–±–∞
        '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Ñ–∏–ª–µ', price: 399.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '–ª–æ—Å–æ—Å—å': { name: '–õ–æ—Å–æ—Å—å —Ñ–∏–ª–µ', price: 599.90, pack: '300–≥', brand: '–ú–∞–∫—Å–∏' },
        '–≥–æ–≤—è–¥–∏–Ω–∞': { name: '–ì–æ–≤—è–¥–∏–Ω–∞ –≤—ã—Ä–µ–∑–∫–∞', price: 899.90, pack: '500–≥', brand: '–ú–∞–∫—Å–∏' },
        
        // –ö—Ä—É–ø—ã –∏ –º–∞–∫–∞—Ä–æ–Ω—ã
        '–æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è': { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', price: 89.90, pack: '500–≥', brand: '–ú–∞–∫—Å–∏' },
        '–≥—Ä–µ—á–∫–∞': { name: '–ì—Ä–µ—á–∫–∞', price: 119.90, pack: '900–≥', brand: '–ú–∞–∫—Å–∏' },
        '—Ä–∏—Å': { name: '–†–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π', price: 149.90, pack: '900–≥', brand: '–ú–∞–∫—Å–∏' },
        '–º–∞–∫–∞—Ä–æ–Ω—ã': { name: '–ú–∞–∫–∞—Ä–æ–Ω—ã —Å–ø–∞–≥–µ—Ç—Ç–∏', price: 79.90, pack: '500–≥', brand: '–ú–∞–∫—Å–∏' },
        
        // –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã
        '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å', price: 89.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '–º–æ—Ä–∫–æ–≤—å': { name: '–ú–æ—Ä–∫–æ–≤—å', price: 79.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '–ª—É–∫': { name: '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π', price: 59.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '–ø–æ–º–∏–¥–æ—Ä—ã': { name: '–ü–æ–º–∏–¥–æ—Ä—ã', price: 199.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '–±–∞–Ω–∞–Ω': { name: '–ë–∞–Ω–∞–Ω—ã', price: 129.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '—è–±–ª–æ–∫–∏': { name: '–Ø–±–ª–æ–∫–∏ –ì–æ–ª–¥–µ–Ω', price: 159.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        
        // –Ø–π—Ü–∞ –∏ –º–∞—Å–ª–æ
        '—è–π—Ü–∞': { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', price: 129.90, pack: '10—à—Ç', brand: '–ú–∞–∫—Å–∏' },
        '—Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ': { name: '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ 82.5%', price: 159.90, pack: '180–≥', brand: '–ú–∞–∫—Å–∏' },
        '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ –º–∞—Å–ª–æ': { name: '–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ', price: 89.90, pack: '1–ª', brand: '–ú–∞–∫—Å–∏' },
        
        // –°–ø–µ—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–∫–∏
        '—Å–∞—Ö–∞—Ä': { name: '–°–∞—Ö–∞—Ä-–ø–µ—Å–æ–∫', price: 69.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '—Å–æ–ª—å': { name: '–°–æ–ª—å –ø–æ–≤–∞—Ä–µ–Ω–Ω–∞—è', price: 29.90, pack: '1–∫–≥', brand: '–ú–∞–∫—Å–∏' },
        '–ø–µ—Ä–µ—Ü': { name: '–ü–µ—Ä–µ—Ü —á–µ—Ä–Ω—ã–π –º–æ–ª–æ—Ç—ã–π', price: 89.90, pack: '100–≥', brand: '–ú–∞–∫—Å–∏' },
        
        // –û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã
        '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏': { name: '–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', price: 299.90, pack: '200–≥', brand: '–ú–∞–∫—Å–∏' },
        '–∏–∑—é–º': { name: '–ò–∑—é–º', price: 149.90, pack: '200–≥', brand: '–ú–∞–∫—Å–∏' },
        '–∫—É—Ä–∞–≥–∞': { name: '–ö—É—Ä–∞–≥–∞', price: 199.90, pack: '200–≥', brand: '–ú–∞–∫—Å–∏' },
        
        // –ó–µ–ª–µ–Ω—å
        '—É–∫—Ä–æ–ø': { name: '–£–∫—Ä–æ–ø —Å–≤–µ–∂–∏–π', price: 89.90, pack: '50–≥', brand: '–ú–∞–∫—Å–∏' },
        '–ø–µ—Ç—Ä—É—à–∫–∞': { name: '–ü–µ—Ç—Ä—É—à–∫–∞ —Å–≤–µ–∂–∞—è', price: 89.90, pack: '50–≥', brand: '–ú–∞–∫—Å–∏' },
        '–∑–µ–ª–µ–Ω—å': { name: '–ó–µ–ª–µ–Ω—å —Å–º–µ—à–∞–Ω–Ω–∞—è', price: 129.90, pack: '100–≥', brand: '–ú–∞–∫—Å–∏' }
    };
    
    // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    let foundProduct = null;
    
    for (const [key, product] of Object.entries(catalog)) {
        if (productName.includes(key) || key.includes(productName)) {
            foundProduct = product;
            break;
        }
    }
    
    if (foundProduct) {
        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: ${foundProduct.name} - ${foundProduct.price} ‚ÇΩ`);
        return `\`\`\`json
${JSON.stringify({
    product: foundProduct.name,
    price: foundProduct.price,
    pack: foundProduct.pack,
    brand: foundProduct.brand,
    source: '–ö–∞—Ç–∞–ª–æ–≥ –ú–∞–∫—Å–∏',
    foundAt: new Date().toISOString()
}, null, 2)}
\`\`\``;
    } else {
        console.log(`‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${productName}"`);
        return `\`\`\`json
${JSON.stringify({
    error: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
    searchedFor: productName,
    suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –ú–∞–∫—Å–∏',
    foundAt: new Date().toISOString()
}, null, 2)}
\`\`\``;
    }
}

// –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
app.post('/api/reset-quota', (req, res) => {
    global.apiQuotaExceeded = false;
    console.log('üîÑ –§–ª–∞–≥ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å–±—Ä–æ—à–µ–Ω');
    res.json({ message: 'Quota flag reset successfully' });
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Mock API
app.post('/api/force-mock', (req, res) => {
    global.apiQuotaExceeded = true;
    console.log('üé≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Mock API');
    res.json({ message: 'Mock API forced successfully' });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        apiKeys: ALTERNATIVE_KEYS.length,
        quotaExceeded: global.apiQuotaExceeded || false,
        mockApiAvailable: true
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
    console.log(`üîë –î–æ—Å—Ç—É–ø–Ω–æ API –∫–ª—é—á–µ–π: ${ALTERNATIVE_KEYS.length}`);
    console.log(`üé≠ Mock API –¥–æ—Å—Ç—É–ø–µ–Ω: /api/gemini-mock`);
    console.log(`üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞: POST /api/reset-quota`);
    console.log(`üé≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Mock: POST /api/force-mock`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: GET /api/health`);
    
    if (global.apiQuotaExceeded) {
        console.log('üé≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Mock API');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
}); 