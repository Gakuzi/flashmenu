const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'file://'],
    credentials: true
}));
app.use(express.json());
app.use(express.static('.'));

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API –∫–ª—é—á–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
const ALTERNATIVE_KEYS = [
    'AIzaSyC1jOV62uVbRCL2Wb7E1dacps7YobyLhL4', // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
    'AIzaSyDKVM2qJQ4lXfjZpQVm9ymxf_GiwMkDBHs', // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
    'AIzaSyBQJdJqJqJqJqJqJqJqJqJqJqJqJqJqJqJq', // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
];

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è Gemini API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–π
app.post('/api/gemini', async (req, res) => {
    try {
        const { prompt } = req.body;
        
        if (!prompt) {
            return res.status(400).json({ error: 'Prompt is required' });
        }

        console.log('ü§ñ Gemini API –∑–∞–ø—Ä–æ—Å:', prompt.substring(0, 100) + '...');

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API –∫–ª—é—á–∏
        let lastError = null;
        
        for (let i = 0; i < ALTERNATIVE_KEYS.length; i++) {
            const apiKey = ALTERNATIVE_KEYS[i];
            console.log(`üîë –ü—Ä–æ–±—É–µ–º API –∫–ª—é—á ${i + 1}/${ALTERNATIVE_KEYS.length}...`);
            
            try {
                const result = await callGeminiWithKey(apiKey, prompt);
                console.log(`‚úÖ –£—Å–ø–µ—Ö —Å –∫–ª—é—á–æ–º ${i + 1}`);
                return res.json(result);
            } catch (error) {
                console.warn(`‚ùå –ö–ª—é—á ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                lastError = error;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                if (error.message.includes('location') || error.message.includes('geographic')) {
                    continue;
                }
                
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
                break;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        console.error('‚ùå –í—Å–µ API –∫–ª—é—á–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
        res.status(500).json({ 
            error: 'All API keys failed',
            message: lastError?.message || 'Geographic restrictions apply to all keys',
            suggestion: 'Try using a VPN or contact support for alternative solutions'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ 
            error: 'Internal Server Error',
            message: error.message 
        });
    }
});

// –í—ã–∑–æ–≤ Gemini API —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
async function callGeminiWithKey(apiKey, prompt) {
    const apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
    
    const response = await fetch(`${apiUrl}?key=${apiKey}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        },
        body: JSON.stringify({
            contents: [{
                parts: [{
                    text: prompt
                }]
            }]
        })
    });

    if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Gemini API Error:', errorData);
        throw new Error(errorData.error?.message || `HTTP ${response.status}`);
    }

    const data = await response.json();
    return data;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.post('/api/gemini-mock', async (req, res) => {
    try {
        const { prompt } = req.body;
        
        if (!prompt) {
            return res.status(400).json({ error: 'Prompt is required' });
        }

        console.log('üé≠ Mock API –∑–∞–ø—Ä–æ—Å:', prompt.substring(0, 100) + '...');

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Gemini API
        const mockResponse = {
            candidates: [{
                content: {
                    parts: [{
                        text: generateMockResponse(prompt)
                    }]
                }
            }]
        };

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        res.json(mockResponse);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Mock API:', error);
        res.status(500).json({ error: 'Mock API Error' });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
function generateMockResponse(prompt) {
    if (prompt.includes('–º–µ–Ω—é')) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        const days = prompt.match(/(\d+)\s*–¥–Ω–µ–π?/)?.[1] || 3;
        const meal = prompt.match(/–¥–ª—è\s+([^—Å]+)/)?.[1] || '–í—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏';
        
        let menuItems = [];
        
        for (let day = 1; day <= days; day++) {
            // –ó–∞–≤—Ç—Ä–∞–∫
            menuItems.push({
                day: `–î–µ–Ω—å ${day}`,
                meal: "–ó–∞–≤—Ç—Ä–∞–∫",
                recipe: `–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏ (–¥–µ–Ω—å ${day})`,
                ingredients: [
                    { name: "–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è", qty: 80, unit: "–≥" },
                    { name: "–ú–æ–ª–æ–∫–æ", qty: 200, unit: "–º–ª" },
                    { name: "–ë–∞–Ω–∞–Ω", qty: 1, unit: "—à—Ç" },
                    { name: "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", qty: 20, unit: "–≥" }
                ],
                cookingTime: 15
            });
            
            // –û–±–µ–¥
            menuItems.push({
                day: `–î–µ–Ω—å ${day}`,
                meal: "–û–±–µ–¥",
                recipe: `–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏ (–¥–µ–Ω—å ${day})`,
                ingredients: [
                    { name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", qty: 150, unit: "–≥" },
                    { name: "–†–∏—Å", qty: 100, unit: "–≥" },
                    { name: "–ë—Ä–æ–∫–∫–æ–ª–∏", qty: 100, unit: "–≥" },
                    { name: "–ú–æ—Ä–∫–æ–≤—å", qty: 50, unit: "–≥" }
                ],
                cookingTime: 30
            });
            
            // –£–∂–∏–Ω
            menuItems.push({
                day: `–î–µ–Ω—å ${day}`,
                meal: "–£–∂–∏–Ω",
                recipe: `–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ (–¥–µ–Ω—å ${day})`,
                ingredients: [
                    { name: "–¢–≤–æ—Ä–æ–≥", qty: 200, unit: "–≥" },
                    { name: "–Ø–π—Ü–∞", qty: 2, unit: "—à—Ç" },
                    { name: "–°–º–µ—Ç–∞–Ω–∞", qty: 50, unit: "–≥" },
                    { name: "–ß–µ—Ä–Ω–∏–∫–∞", qty: 100, unit: "–≥" }
                ],
                cookingTime: 25
            });
        }
        
        return `\`\`\`json\n${JSON.stringify(menuItems, null, 2)}\n\`\`\``;
        
    } else if (prompt.includes('—Ü–µ–Ω–∞') || prompt.includes('–ú–∞–∫—Å–∏')) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const productName = prompt.match(/"([^"]+)"/)?.[1] || '–ü—Ä–æ–¥—É–∫—Ç';
        
        const realisticPrices = {
            '–æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è': { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', pack: '500–≥', price: 89.90 },
            '–º–æ–ª–æ–∫–æ': { name: '–ú–æ–ª–æ–∫–æ 3.2%', pack: '1–ª', price: 89.90 },
            '–±–∞–Ω–∞–Ω': { name: '–ë–∞–Ω–∞–Ω—ã', pack: '1–∫–≥', price: 129.90 },
            '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏': { name: '–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', pack: '200–≥', price: 299.90 },
            '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Ñ–∏–ª–µ', pack: '1–∫–≥', price: 399.90 },
            '—Ä–∏—Å': { name: '–†–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π', pack: '900–≥', price: 149.90 },
            '–±—Ä–æ–∫–∫–æ–ª–∏': { name: '–ë—Ä–æ–∫–∫–æ–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è', pack: '400–≥', price: 199.90 },
            '–º–æ—Ä–∫–æ–≤—å': { name: '–ú–æ—Ä–∫–æ–≤—å', pack: '1–∫–≥', price: 79.90 },
            '—Ç–≤–æ—Ä–æ–≥': { name: '–¢–≤–æ—Ä–æ–≥ 5%', pack: '200–≥', price: 89.90 },
            '—è–π—Ü–∞': { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', pack: '10—à—Ç', price: 129.90 },
            '—Å–º–µ—Ç–∞–Ω–∞': { name: '–°–º–µ—Ç–∞–Ω–∞ 20%', pack: '400–≥', price: 89.90 },
            '—á–µ—Ä–Ω–∏–∫–∞': { name: '–ß–µ—Ä–Ω–∏–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è', pack: '400–≥', price: 299.90 }
        };
        
        // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        const lowerProductName = productName.toLowerCase();
        let foundProduct = null;
        
        for (const [key, product] of Object.entries(realisticPrices)) {
            if (lowerProductName.includes(key) || key.includes(lowerProductName)) {
                foundProduct = product;
                break;
            }
        }
        
        if (foundProduct) {
            return `\`\`\`json\n${JSON.stringify(foundProduct, null, 2)}\n\`\`\``;
        } else {
            // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É
            return `\`\`\`json\n{
  "name": "${productName}",
  "pack": "~",
  "price": 150.00
}\n\`\`\``;
        }
        
    } else {
        return '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Mock API. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini.';
    }
}

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        keys: ALTERNATIVE_KEYS.length,
        mock: true
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
    console.log(`üîë –î–æ—Å—Ç—É–ø–Ω–æ API –∫–ª—é—á–µ–π: ${ALTERNATIVE_KEYS.length}`);
    console.log(`üé≠ Mock API –¥–æ—Å—Ç—É–ø–µ–Ω: /api/gemini-mock`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
}); 