// Flash Menu - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
// –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å Mock API

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let menus = [];
let currentMenu = null;
let currentProducts = [];
let availableIngredients = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Flash Menu –∑–∞–ø—É—â–µ–Ω');
    loadUserData();
    setupEventListeners();
    checkAuth();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –§–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.getElementById('loginForm').addEventListener('submit', handleLogin);
    document.getElementById('showRegister').addEventListener('click', showRegisterForm);
    document.getElementById('showForgotPassword').addEventListener('click', showForgotPasswordForm);
    document.getElementById('backToLogin').addEventListener('click', showLoginForm);
    document.getElementById('resetPasswordBtn').addEventListener('click', handleForgotPassword);
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    document.getElementById('menuForm').addEventListener('submit', generateMenu);
    document.getElementById('logoutBtn').addEventListener('click', handleLogout);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.addEventListener('click', () => switchTab(tab.dataset.tab));
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function showRegisterForm(e) {
    e.preventDefault();
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('forgotPasswordForm').style.display = 'none';
    
    const registerForm = document.createElement('form');
    registerForm.id = 'registerForm';
    registerForm.className = 'auth-form';
    registerForm.innerHTML = `
        <h3>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h3>
        <div class="form-group">
            <label class="form-label">Email</label>
            <input type="email" class="form-input" id="registerEmail" required>
        </div>
        <div class="form-group">
            <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
            <input type="password" class="form-input" id="registerPassword" required>
        </div>
        <button type="submit" class="btn btn-primary btn-large">
            <i class="fas fa-user-plus"></i>
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>
        <div class="auth-switch">
            <a href="#" id="backToLoginFromRegister">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É</a>
        </div>
    `;
    
    document.querySelector('.auth-card').appendChild(registerForm);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registerForm.addEventListener('submit', handleRegister);
    document.getElementById('backToLoginFromRegister').addEventListener('click', showLoginForm);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
function showLoginForm() {
    document.getElementById('loginForm').style.display = 'block';
    document.getElementById('forgotPasswordForm').style.display = 'none';
    const registerForm = document.getElementById('registerForm');
    if (registerForm) registerForm.remove();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
function showForgotPasswordForm(e) {
    e.preventDefault();
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('forgotPasswordForm').style.display = 'block';
    const registerForm = document.getElementById('registerForm');
    if (registerForm) registerForm.remove();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
function handleLogin(e) {
    e.preventDefault();
    
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    
    if (!email || !password) {
        showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)
    const users = JSON.parse(localStorage.getItem('users') || '[]');
    const user = users.find(u => u.email === email && u.password === password);
    
    if (user) {
        currentUser = user;
        showApp();
        showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
    } else {
        showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function handleRegister(e) {
    e.preventDefault();
    
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    
    if (!email || !password) {
        showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (password.length < 6) {
        showMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
        return;
    }
    
    const users = JSON.parse(localStorage.getItem('users') || '[]');
    
    if (users.find(u => u.email === email)) {
        showMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
        return;
    }
    
    const newUser = {
        id: Date.now(),
        email,
        password,
        createdAt: new Date().toISOString()
    };
    
    users.push(newUser);
    localStorage.setItem('users', JSON.stringify(users));
    
    currentUser = newUser;
    showApp();
    showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
function handleForgotPassword(e) {
    e.preventDefault();
    
    const email = document.getElementById('forgotPasswordEmail').value;
    
    if (!email) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ email', 'error');
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ email
    showMessage('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email', 'success');
    showLoginForm();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        showApp();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function showApp() {
    document.getElementById('authScreen').style.display = 'none';
    document.getElementById('appContainer').style.display = 'block';
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('currentUser', JSON.stringify(currentUser));
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
    document.getElementById('userAvatar').innerHTML = currentUser.email.charAt(0).toUpperCase();
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
function handleLogout() {
    currentUser = null;
    localStorage.removeItem('currentUser');
    
    document.getElementById('appContainer').style.display = 'none';
    document.getElementById('authScreen').style.display = 'flex';
    
    // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—ã
    document.getElementById('loginForm').reset();
    showLoginForm();
    
    showMessage('–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    if (!currentUser) return;
    
    const userKey = `user_${currentUser.id}`;
    const userData = JSON.parse(localStorage.getItem(userKey) || '{}');
    
    menus = userData.menus || [];
    currentMenu = userData.currentMenu || null;
    currentProducts = userData.currentProducts || [];
    availableIngredients = userData.availableIngredients || [];
    
    updateMenuSelector();
    renderMenuItems();
    renderShoppingList();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    if (!currentUser) return;
    
    const userKey = `user_${currentUser.id}`;
    const userData = {
        menus,
        currentMenu,
        currentProducts,
        availableIngredients
    };
    
    localStorage.setItem(userKey, JSON.stringify(userData));
}

// Mock API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
function generateMockMenu(days, meal) {
    const breakfastOptions = [
        {
            recipe: "–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏",
            ingredients: [
                { name: "–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è", qty: 80, unit: "–≥" },
                { name: "–ú–æ–ª–æ–∫–æ", qty: 200, unit: "–º–ª" },
                { name: "–ë–∞–Ω–∞–Ω", qty: 1, unit: "—à—Ç" },
                { name: "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏", qty: 20, unit: "–≥" }
            ],
            cookingTime: 15
        },
        {
            recipe: "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –∏–∑—é–º–æ–º",
            ingredients: [
                { name: "–¢–≤–æ—Ä–æ–≥", qty: 200, unit: "–≥" },
                { name: "–Ø–π—Ü–∞", qty: 2, unit: "—à—Ç" },
                { name: "–ò–∑—é–º", qty: 50, unit: "–≥" },
                { name: "–°–∞—Ö–∞—Ä", qty: 30, unit: "–≥" }
            ],
            cookingTime: 25
        },
        {
            recipe: "–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å –º–æ–ª–æ–∫–æ–º",
            ingredients: [
                { name: "–ì—Ä–µ—á–∫–∞", qty: 100, unit: "–≥" },
                { name: "–ú–æ–ª–æ–∫–æ", qty: 300, unit: "–º–ª" },
                { name: "–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ", qty: 20, unit: "–≥" }
            ],
            cookingTime: 20
        }
    ];

    const lunchOptions = [
        {
            recipe: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏",
            ingredients: [
                { name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", qty: 150, unit: "–≥" },
                { name: "–†–∏—Å", qty: 100, unit: "–≥" },
                { name: "–ë—Ä–æ–∫–∫–æ–ª–∏", qty: 100, unit: "–≥" },
                { name: "–ú–æ—Ä–∫–æ–≤—å", qty: 50, unit: "–≥" }
            ],
            cookingTime: 30
        },
        {
            recipe: "–õ–æ—Å–æ—Å—å —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º",
            ingredients: [
                { name: "–õ–æ—Å–æ—Å—å", qty: 150, unit: "–≥" },
                { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", qty: 200, unit: "–≥" },
                { name: "–õ–∏–º–æ–Ω", qty: 0.5, unit: "—à—Ç" },
                { name: "–£–∫—Ä–æ–ø", qty: 10, unit: "–≥" }
            ],
            cookingTime: 35
        },
        {
            recipe: "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π —Å—É–ø",
            ingredients: [
                { name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", qty: 150, unit: "–≥" },
                { name: "–ú–æ—Ä–∫–æ–≤—å", qty: 100, unit: "–≥" },
                { name: "–õ—É–∫", qty: 50, unit: "–≥" },
                { name: "–ó–µ–ª–µ–Ω—å", qty: 20, unit: "–≥" }
            ],
            cookingTime: 40
        }
    ];

    const dinnerOptions = [
        {
            recipe: "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏",
            ingredients: [
                { name: "–¢–≤–æ—Ä–æ–≥", qty: 200, unit: "–≥" },
                { name: "–Ø–π—Ü–∞", qty: 2, unit: "—à—Ç" },
                { name: "–°–º–µ—Ç–∞–Ω–∞", qty: 50, unit: "–≥" },
                { name: "–ß–µ—Ä–Ω–∏–∫–∞", qty: 100, unit: "–≥" }
            ],
            cookingTime: 25
        },
        {
            recipe: "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏",
            ingredients: [
                { name: "–Ø–π—Ü–∞", qty: 3, unit: "—à—Ç" },
                { name: "–ü–æ–º–∏–¥–æ—Ä—ã", qty: 100, unit: "–≥" },
                { name: "–®–ø–∏–Ω–∞—Ç", qty: 50, unit: "–≥" },
                { name: "–°—ã—Ä", qty: 50, unit: "–≥" }
            ],
            cookingTime: 15
        },
        {
            recipe: "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
            ingredients: [
                { name: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", qty: 100, unit: "–≥" },
                { name: "–°–∞–ª–∞—Ç –ê–π—Å–±–µ—Ä–≥", qty: 100, unit: "–≥" },
                { name: "–°—É—Ö–∞—Ä–∏–∫–∏", qty: 30, unit: "–≥" },
                { name: "–°—ã—Ä –ü–∞—Ä–º–µ–∑–∞–Ω", qty: 30, unit: "–≥" }
            ],
            cookingTime: 20
        }
    ];

    let menuItems = [];
    
    for (let day = 1; day <= days; day++) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        const breakfast = breakfastOptions[day % breakfastOptions.length];
        const lunch = lunchOptions[day % lunchOptions.length];
        const dinner = dinnerOptions[day % dinnerOptions.length];

        // –ó–∞–≤—Ç—Ä–∞–∫
        menuItems.push({
            day: `–î–µ–Ω—å ${day}`,
            meal: "–ó–∞–≤—Ç—Ä–∞–∫",
            recipe: `${breakfast.recipe} (–¥–µ–Ω—å ${day})`,
            ingredients: breakfast.ingredients,
            cookingTime: breakfast.cookingTime
        });
        
        // –û–±–µ–¥
        menuItems.push({
            day: `–î–µ–Ω—å ${day}`,
            meal: "–û–±–µ–¥",
            recipe: `${lunch.recipe} (–¥–µ–Ω—å ${day})`,
            ingredients: lunch.ingredients,
            cookingTime: lunch.cookingTime
        });
        
        // –£–∂–∏–Ω
        menuItems.push({
            day: `–î–µ–Ω—å ${day}`,
            meal: "–£–∂–∏–Ω",
            recipe: `${dinner.recipe} (–¥–µ–Ω—å ${day})`,
            ingredients: dinner.ingredients,
            cookingTime: dinner.cookingTime
        });
    }
    
    return menuItems;
}

// Mock API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
function getMockPrices(ingredients) {
    const realisticPrices = {
        // –ó–∞–≤—Ç—Ä–∞–∫
        '–æ–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è': { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', pack: '500–≥', price: 89.90 },
        '–º–æ–ª–æ–∫–æ': { name: '–ú–æ–ª–æ–∫–æ 3.2%', pack: '1–ª', price: 89.90 },
        '–±–∞–Ω–∞–Ω': { name: '–ë–∞–Ω–∞–Ω—ã', pack: '1–∫–≥', price: 129.90 },
        '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏': { name: '–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', pack: '200–≥', price: 299.90 },
        '—Ç–≤–æ—Ä–æ–≥': { name: '–¢–≤–æ—Ä–æ–≥ 5%', pack: '200–≥', price: 89.90 },
        '—è–π—Ü–∞': { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', pack: '10—à—Ç', price: 129.90 },
        '–∏–∑—é–º': { name: '–ò–∑—é–º', pack: '200–≥', price: 149.90 },
        '—Å–∞—Ö–∞—Ä': { name: '–°–∞—Ö–∞—Ä-–ø–µ—Å–æ–∫', pack: '1–∫–≥', price: 69.90 },
        '–≥—Ä–µ—á–∫–∞': { name: '–ì—Ä–µ—á–∫–∞', pack: '900–≥', price: 119.90 },
        '—Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ': { name: '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ 82.5%', pack: '180–≥', price: 159.90 },
        
        // –û–±–µ–¥
        '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞': { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Ñ–∏–ª–µ', pack: '1–∫–≥', price: 399.90 },
        '—Ä–∏—Å': { name: '–†–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π', pack: '900–≥', price: 149.90 },
        '–±—Ä–æ–∫–∫–æ–ª–∏': { name: '–ë—Ä–æ–∫–∫–æ–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è', pack: '400–≥', price: 199.90 },
        '–º–æ—Ä–∫–æ–≤—å': { name: '–ú–æ—Ä–∫–æ–≤—å', pack: '1–∫–≥', price: 79.90 },
        '–ª–æ—Å–æ—Å—å': { name: '–õ–æ—Å–æ—Å—å —Ñ–∏–ª–µ', pack: '300–≥', price: 599.90 },
        '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å', pack: '1–∫–≥', price: 89.90 },
        '–ª–∏–º–æ–Ω': { name: '–õ–∏–º–æ–Ω', pack: '1–∫–≥', price: 199.90 },
        '—É–∫—Ä–æ–ø': { name: '–£–∫—Ä–æ–ø —Å–≤–µ–∂–∏–π', pack: '50–≥', price: 89.90 },
        '–ª—É–∫': { name: '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π', pack: '1–∫–≥', price: 59.90 },
        '–∑–µ–ª–µ–Ω—å': { name: '–ó–µ–ª–µ–Ω—å —Å–º–µ—à–∞–Ω–Ω–∞—è', pack: '100–≥', price: 129.90 },
        
        // –£–∂–∏–Ω
        '—Å–º–µ—Ç–∞–Ω–∞': { name: '–°–º–µ—Ç–∞–Ω–∞ 20%', pack: '400–≥', price: 89.90 },
        '—á–µ—Ä–Ω–∏–∫–∞': { name: '–ß–µ—Ä–Ω–∏–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è', pack: '400–≥', price: 299.90 },
        '–ø–æ–º–∏–¥–æ—Ä—ã': { name: '–ü–æ–º–∏–¥–æ—Ä—ã', pack: '1–∫–≥', price: 199.90 },
        '—à–ø–∏–Ω–∞—Ç': { name: '–®–ø–∏–Ω–∞—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π', pack: '400–≥', price: 179.90 },
        '—Å—ã—Ä': { name: '–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π', pack: '200–≥', price: 189.90 },
        '—Å–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥': { name: '–°–∞–ª–∞—Ç –ê–π—Å–±–µ—Ä–≥', pack: '400–≥', price: 159.90 },
        '—Å—É—Ö–∞—Ä–∏–∫–∏': { name: '–°—É—Ö–∞—Ä–∏–∫–∏ —Ä–∂–∞–Ω—ã–µ', pack: '100–≥', price: 89.90 },
        '—Å—ã—Ä –ø–∞—Ä–º–µ–∑–∞–Ω': { name: '–°—ã—Ä –ü–∞—Ä–º–µ–∑–∞–Ω', pack: '100–≥', price: 399.90 }
    };

    let totalCost = 0;
    let products = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    let allIngredients = [];
    ingredients.forEach(item => {
        item.ingredients.forEach(ingredient => {
            allIngredients.push({
                name: ingredient.name.toLowerCase(),
                qty: ingredient.qty,
                unit: ingredient.unit
            });
        });
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    const groupedIngredients = {};
    allIngredients.forEach(ingredient => {
        const key = ingredient.name;
        if (groupedIngredients[key]) {
            groupedIngredients[key].qty += ingredient.qty;
        } else {
            groupedIngredients[key] = { ...ingredient };
        }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
    Object.values(groupedIngredients).forEach(ingredient => {
        let foundProduct = null;
        
        // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
        for (const [key, product] of Object.entries(realisticPrices)) {
            if (ingredient.name.includes(key) || key.includes(ingredient.name)) {
                foundProduct = product;
                break;
            }
        }

        if (foundProduct) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            const packQty = parseFloat(foundProduct.pack.replace(/[^\d.]/g, ''));
            const packsNeeded = Math.ceil(ingredient.qty / packQty);
            const cost = packsNeeded * foundProduct.price;
            
            totalCost += cost;
            
            products.push({
                name: foundProduct.name,
                pack: foundProduct.pack,
                price: foundProduct.price,
                qty: ingredient.qty,
                unit: ingredient.unit,
                packsNeeded,
                totalCost: cost
            });
        } else {
            // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É
            const estimatedCost = 150;
            totalCost += estimatedCost;
            
            products.push({
                name: ingredient.name,
                pack: '~',
                price: 150,
                qty: ingredient.qty,
                unit: ingredient.unit,
                packsNeeded: 1,
                totalCost: estimatedCost
            });
        }
    });

    return { products, totalCost };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
async function generateMenu(e) {
    e.preventDefault();
    
    const budget = parseInt(document.getElementById('budget').value);
    const days = parseInt(document.getElementById('days').value);
    const start = document.getElementById('start').value;
    const meal = document.getElementById('meal').value;

    if (budget < 500) {
        showMessage('–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 500 ‚ÇΩ', 'error');
        return;
    }

    showLoading(true);
    showMessage('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é...', 'success');

    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–µ–Ω—é...');
        console.log('üí∞ –ë—é–¥–∂–µ—Ç:', budget, '‚ÇΩ');
        console.log('üìÖ –î–Ω–∏:', days);
        console.log('üçΩÔ∏è –ü—Ä–∏–µ–º –ø–∏—â–∏:', meal);
        console.log('üìç –ù–∞—á–∞–ª–æ:', start);
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ Mock API
        const menuData = generateMockMenu(days, meal);
        
        console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é:', menuData);
        
        if (!menuData || !Array.isArray(menuData)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é');
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        console.log('üí∞ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
        const productsWithPrices = getMockPrices(menuData);
        
        console.log('üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', productsWithPrices.totalCost, '‚ÇΩ');
        
        if (productsWithPrices.totalCost > budget) {
            console.log('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é...');
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ - —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            const adjustedDays = Math.floor(budget / (productsWithPrices.totalCost / days));
            if (adjustedDays >= 1) {
                const adjustedMenu = generateMockMenu(adjustedDays, meal);
                const adjustedPrices = getMockPrices(adjustedMenu);
                console.log('‚úÖ –ú–µ–Ω—é —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞', adjustedDays, '–¥–Ω–µ–π');
                menuData.splice(0, menuData.length, ...adjustedMenu);
                Object.assign(productsWithPrices, adjustedPrices);
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é...');
        
        const menuId = Date.now();
        const newMenu = {
            id: menuId,
            budget,
            days,
            meal,
            start,
            items: menuData,
            totalCost: productsWithPrices.totalCost,
            createdAt: new Date().toISOString()
        };
        
        console.log('üìã –ù–æ–≤–æ–µ –º–µ–Ω—é:', newMenu);
        
        menus.push(newMenu);
        currentMenu = newMenu;
        currentProducts = productsWithPrices.products;
        
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        console.log('üçΩÔ∏è –ú–µ–Ω—é:', menus.length, '—à—Ç');
        console.log('üõí –ü—Ä–æ–¥—É–∫—Ç—ã:', currentProducts.length, '—à—Ç');

        saveUserData();
        updateMenuSelector();
        showMessage('–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
        
        console.log('‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∫—É–ø–æ–∫
        setTimeout(() => switchTab('shopping'), 1000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é:', error);
        showMessage(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        showLoading(false);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–µ–Ω—é
function updateMenuSelector() {
    const menuSelect = document.getElementById('menuSelect');
    if (!menuSelect) return;
    
    menuSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é</option>';
    
    menus.forEach(menu => {
        const option = document.createElement('option');
        option.value = menu.id;
        option.textContent = `–ú–µ–Ω—é –Ω–∞ ${menu.days} –¥–Ω–µ–π (${menu.meal}) - ${menu.totalCost.toFixed(2)} ‚ÇΩ - ${new Date(menu.createdAt).toLocaleDateString()}`;
        menuSelect.appendChild(option);
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
function renderMenuItems() {
    const menuContent = document.getElementById('menuContent');
    if (!menuContent) return;
    
    if (!currentMenu) {
        menuContent.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>';
        return;
    }
    
    let html = '<div class="menu-info">';
    html += `<h3>–ú–µ–Ω—é –Ω–∞ ${currentMenu.days} –¥–Ω–µ–π</h3>`;
    html += `<p><strong>–ë—é–¥–∂–µ—Ç:</strong> ${currentMenu.budget} ‚ÇΩ</p>`;
    html += `<p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${currentMenu.totalCost.toFixed(2)} ‚ÇΩ</p>`;
    html += `<p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(currentMenu.createdAt).toLocaleDateString()}</p>`;
    html += '</div>';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –¥–Ω—è–º
    const groupedByDay = {};
    currentMenu.items.forEach(item => {
        if (!groupedByDay[item.day]) {
            groupedByDay[item.day] = [];
        }
        groupedByDay[item.day].push(item);
    });
    
    Object.entries(groupedByDay).forEach(([day, items]) => {
        html += `<div class="day-group">`;
        html += `<h4 class="day-header">${day}</h4>`;
        
        items.forEach(item => {
            html += `
                <div class="recipe-card">
                    <div class="recipe-header">
                        <span class="recipe-title">${item.meal}: ${item.recipe}</span>
                        <span class="recipe-time">${item.cookingTime} –º–∏–Ω</span>
                    </div>
                    <div class="recipe-ingredients">
                        <strong>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</strong><br>
                        ${item.ingredients.map(ing => `${ing.name} - ${ing.qty} ${ing.unit}`).join('<br>')}
                    </div>
                    <button class="btn btn-primary" onclick="startTimer(${item.cookingTime}, '${item.recipe}')">
                        <i class="fas fa-clock"></i> –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
                    </button>
                </div>
            `;
        });
        
        html += `</div>`;
    });
    
    menuContent.innerHTML = html;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
function renderShoppingList() {
    const shoppingContent = document.getElementById('shoppingContent');
    if (!shoppingContent) return;
    
    if (!currentProducts || currentProducts.length === 0) {
        shoppingContent.innerHTML = '<p>–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–µ–Ω—é</p>';
        return;
    }
    
    let html = `
        <div class="search-box">
            <input type="text" class="search-input" id="searchProducts" placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...">
        </div>
        <div class="progress-bar">
            <div class="progress-fill" id="progressFill" style="width: 0%"></div>
        </div>
        <div class="total-sum" id="totalSum">
            –û–±—â–∞—è —Å—É–º–º–∞: ${currentProducts.reduce((sum, p) => sum + p.totalCost, 0).toFixed(2)} ‚ÇΩ
        </div>
    `;
    
    currentProducts.forEach((product, index) => {
        html += `
            <div class="product-card" data-index="${index}">
                <input type="checkbox" class="checkbox" id="product${index}" onchange="toggleProduct(${index})">
                <div class="product-info">
                    <div class="product-name">${product.name}</div>
                    <div class="product-details">
                        ${product.qty} ${product.unit} | ${product.pack} | ${product.price} ‚ÇΩ
                    </div>
                </div>
                <div class="product-price">${product.totalCost.toFixed(2)} ‚ÇΩ</div>
            </div>
        `;
    });
    
    html += `
        <div class="actions">
            <button class="btn btn-success" onclick="markAllAsBought()">
                <i class="fas fa-check-double"></i> –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            </button>
            <button class="btn btn-warning" onclick="clearBoughtProducts()">
                <i class="fas fa-eraser"></i> –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏
            </button>
        </div>
    `;
    
    shoppingContent.innerHTML = html;
    
    // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const searchInput = document.getElementById('searchProducts');
    if (searchInput) {
        searchInput.addEventListener('input', filterProducts);
    }
    
    updateProgress();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(tabName).classList.add('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
function showMessage(text, type = 'info') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${text}
    `;
    
    document.querySelector('.container').insertBefore(messageDiv, document.querySelector('.container').firstChild);
    
    setTimeout(() => {
        messageDiv.remove();
    }, 5000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading(show) {
    const loading = document.getElementById('loading');
    if (loading) {
        loading.classList.toggle('active', show);
    }
}

// –¢–∞–π–º–µ—Ä –≥–æ—Ç–æ–≤–∫–∏
function startTimer(minutes, recipeName) {
    const timerDiv = document.createElement('div');
    timerDiv.className = 'timer active';
    timerDiv.innerHTML = `
        <h3>–¢–∞–π–º–µ—Ä –¥–ª—è: ${recipeName}</h3>
        <div class="timer-display" id="timerDisplay">${minutes}:00</div>
        <button class="btn btn-success" onclick="this.parentElement.remove()">–ì–æ—Ç–æ–≤–æ!</button>
    `;
    
    document.querySelector('.container').insertBefore(timerDiv, document.querySelector('.container').firstChild);
    
    let timeLeft = minutes * 60;
    const timerInterval = setInterval(() => {
        timeLeft--;
        const minutesLeft = Math.floor(timeLeft / 60);
        const secondsLeft = timeLeft % 60;
        
        document.getElementById('timerDisplay').textContent = 
            `${minutesLeft}:${secondsLeft.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if (Notification.permission === 'granted') {
                new Notification('–ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!', {
                    body: `–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è ${recipeName} –∏—Å—Ç–µ–∫–ª–æ`,
                    icon: '/favicon.ico'
                });
            } else {
                alert(`–ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ! –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è ${recipeName} –∏—Å—Ç–µ–∫–ª–æ`);
            }
        }
    }, 1000);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫—É–ø–ª–µ–Ω/–Ω–µ –∫—É–ø–ª–µ–Ω)
function toggleProduct(index) {
    const boughtProducts = JSON.parse(localStorage.getItem('boughtProducts') || '[]');
    const productIndex = boughtProducts.indexOf(index);
    
    if (productIndex === -1) {
        boughtProducts.push(index);
    } else {
        boughtProducts.splice(productIndex, 1);
    }
    
    localStorage.setItem('boughtProducts', JSON.stringify(boughtProducts));
    updateProgress();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∫—É–ø–æ–∫
function updateProgress() {
    const boughtProducts = JSON.parse(localStorage.getItem('boughtProducts') || '[]');
    const totalProducts = currentProducts.length;
    const boughtCount = boughtProducts.length;
    const progress = totalProducts > 0 ? (boughtCount / totalProducts) * 100 : 0;
    
    const progressFill = document.getElementById('progressFill');
    if (progressFill) {
        progressFill.style.width = `${progress}%`;
    }
    
    const totalSum = document.getElementById('totalSum');
    if (totalSum) {
        const remainingCost = currentProducts
            .filter((_, index) => !boughtProducts.includes(index))
            .reduce((sum, p) => sum + p.totalCost, 0);
        
        totalSum.innerHTML = `
            –û–±—â–∞—è —Å—É–º–º–∞: ${currentProducts.reduce((sum, p) => sum + p.totalCost, 0).toFixed(2)} ‚ÇΩ<br>
            –û—Å—Ç–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å: ${remainingCost.toFixed(2)} ‚ÇΩ
        `;
    }
}

// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ
function markAllAsBought() {
    const boughtProducts = [];
    for (let i = 0; i < currentProducts.length; i++) {
        boughtProducts.push(i);
    }
    localStorage.setItem('boughtProducts', JSON.stringify(boughtProducts));
    updateProgress();
    
    // –û–±–Ω–æ–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã
    currentProducts.forEach((_, index) => {
        const checkbox = document.getElementById(`product${index}`);
        if (checkbox) checkbox.checked = true;
    });
}

// –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –æ –ø–æ–∫—É–ø–∫–∞—Ö
function clearBoughtProducts() {
    localStorage.removeItem('boughtProducts');
    updateProgress();
    
    // –°–Ω—è—Ç—å —á–µ–∫–±–æ–∫—Å—ã
    currentProducts.forEach((_, index) => {
        const checkbox = document.getElementById(`product${index}`);
        if (checkbox) checkbox.checked = false;
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function filterProducts() {
    const searchTerm = document.getElementById('searchProducts').value.toLowerCase();
    const productCards = document.querySelectorAll('.product-card');
    
    productCards.forEach(card => {
        const productName = card.querySelector('.product-name').textContent.toLowerCase();
        if (productName.includes(searchTerm)) {
            card.style.display = 'flex';
        } else {
            card.style.display = 'none';
        }
    });
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
if ('Notification' in window) {
    Notification.requestPermission();
} 